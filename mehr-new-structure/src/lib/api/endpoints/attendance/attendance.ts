/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AttendanceControllerFindAllParams,
  AttendanceEntity,
  CreateAttendanceDto,
  PaginatedAttendanceResponse,
  UpdateAttendanceDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const attendanceControllerFindAll = (
  params?: AttendanceControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedAttendanceResponse>({
    url: `/api/attendance`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAttendanceControllerFindAllQueryKey = (
  params?: AttendanceControllerFindAllParams
) => {
  return [`/api/attendance`, ...(params ? [params] : [])] as const;
};

export const getAttendanceControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof attendanceControllerFindAll>>,
  TError = unknown,
>(
  params?: AttendanceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAttendanceControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attendanceControllerFindAll>>> = ({
    signal,
  }) => attendanceControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof attendanceControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AttendanceControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof attendanceControllerFindAll>>
>;
export type AttendanceControllerFindAllQueryError = unknown;

export function useAttendanceControllerFindAll<
  TData = Awaited<ReturnType<typeof attendanceControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | AttendanceControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof attendanceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof attendanceControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAttendanceControllerFindAll<
  TData = Awaited<ReturnType<typeof attendanceControllerFindAll>>,
  TError = unknown,
>(
  params?: AttendanceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof attendanceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof attendanceControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAttendanceControllerFindAll<
  TData = Awaited<ReturnType<typeof attendanceControllerFindAll>>,
  TError = unknown,
>(
  params?: AttendanceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAttendanceControllerFindAll<
  TData = Awaited<ReturnType<typeof attendanceControllerFindAll>>,
  TError = unknown,
>(
  params?: AttendanceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAttendanceControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const attendanceControllerCreate = (
  createAttendanceDto: CreateAttendanceDto,
  signal?: AbortSignal
) => {
  return apiInstance<AttendanceEntity>({
    url: `/api/attendance`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createAttendanceDto,
    signal,
  });
};

export const getAttendanceControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attendanceControllerCreate>>,
    TError,
    { data: CreateAttendanceDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof attendanceControllerCreate>>,
  TError,
  { data: CreateAttendanceDto },
  TContext
> => {
  const mutationKey = ['attendanceControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attendanceControllerCreate>>,
    { data: CreateAttendanceDto }
  > = (props) => {
    const { data } = props ?? {};

    return attendanceControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AttendanceControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof attendanceControllerCreate>>
>;
export type AttendanceControllerCreateMutationBody = CreateAttendanceDto;
export type AttendanceControllerCreateMutationError = unknown;

export const useAttendanceControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof attendanceControllerCreate>>,
      TError,
      { data: CreateAttendanceDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof attendanceControllerCreate>>,
  TError,
  { data: CreateAttendanceDto },
  TContext
> => {
  const mutationOptions = getAttendanceControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const attendanceControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<AttendanceEntity>({ url: `/api/attendance/${id}`, method: 'GET', signal });
};

export const getAttendanceControllerFindOneQueryKey = (id?: string) => {
  return [`/api/attendance/${id}`] as const;
};

export const getAttendanceControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof attendanceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAttendanceControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attendanceControllerFindOne>>> = ({
    signal,
  }) => attendanceControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof attendanceControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AttendanceControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof attendanceControllerFindOne>>
>;
export type AttendanceControllerFindOneQueryError = unknown;

export function useAttendanceControllerFindOne<
  TData = Awaited<ReturnType<typeof attendanceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof attendanceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof attendanceControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAttendanceControllerFindOne<
  TData = Awaited<ReturnType<typeof attendanceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof attendanceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof attendanceControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAttendanceControllerFindOne<
  TData = Awaited<ReturnType<typeof attendanceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAttendanceControllerFindOne<
  TData = Awaited<ReturnType<typeof attendanceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof attendanceControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAttendanceControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const attendanceControllerUpdate = (
  id: string,
  updateAttendanceDto: UpdateAttendanceDto
) => {
  return apiInstance<AttendanceEntity>({
    url: `/api/attendance/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateAttendanceDto,
  });
};

export const getAttendanceControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attendanceControllerUpdate>>,
    TError,
    { id: string; data: UpdateAttendanceDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof attendanceControllerUpdate>>,
  TError,
  { id: string; data: UpdateAttendanceDto },
  TContext
> => {
  const mutationKey = ['attendanceControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attendanceControllerUpdate>>,
    { id: string; data: UpdateAttendanceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return attendanceControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AttendanceControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof attendanceControllerUpdate>>
>;
export type AttendanceControllerUpdateMutationBody = UpdateAttendanceDto;
export type AttendanceControllerUpdateMutationError = unknown;

export const useAttendanceControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof attendanceControllerUpdate>>,
      TError,
      { id: string; data: UpdateAttendanceDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof attendanceControllerUpdate>>,
  TError,
  { id: string; data: UpdateAttendanceDto },
  TContext
> => {
  const mutationOptions = getAttendanceControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const attendanceControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/attendance/${id}`, method: 'DELETE' });
};

export const getAttendanceControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attendanceControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof attendanceControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['attendanceControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attendanceControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return attendanceControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type AttendanceControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof attendanceControllerRemove>>
>;

export type AttendanceControllerRemoveMutationError = unknown;

export const useAttendanceControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof attendanceControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof attendanceControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAttendanceControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
