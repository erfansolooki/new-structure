/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateWalletDto,
  File,
  FundTransferDto,
  PaginatedWalletResponseDto,
  PayPreInvoice,
  PayTreatmentPlanByAdminDto,
  PayTreatmentPlanDto,
  UserFundTransferDto,
  Wallet,
  WalletControllerDetails200,
  WalletControllerDetailsParams,
  WalletControllerFindAllParams,
  WalletControllerFindOneByAdmin200,
  WalletControllerFindOneByAdminParams,
  WalletDetailsResponseDto,
  WalletTransaction,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const walletControllerCreate = (createWalletDto: CreateWalletDto, signal?: AbortSignal) => {
  return apiInstance<Wallet>({
    url: `/api/wallet`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createWalletDto,
    signal,
  });
};

export const getWalletControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerCreate>>,
    TError,
    { data: CreateWalletDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerCreate>>,
  TError,
  { data: CreateWalletDto },
  TContext
> => {
  const mutationKey = ['walletControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerCreate>>,
    { data: CreateWalletDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerCreate>>
>;
export type WalletControllerCreateMutationBody = CreateWalletDto;
export type WalletControllerCreateMutationError = unknown;

export const useWalletControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerCreate>>,
      TError,
      { data: CreateWalletDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerCreate>>,
  TError,
  { data: CreateWalletDto },
  TContext
> => {
  const mutationOptions = getWalletControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerFindAll = (
  params?: WalletControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/wallet`, method: 'GET', params, signal });
};

export const getWalletControllerFindAllQueryKey = (params?: WalletControllerFindAllParams) => {
  return [`/api/wallet`, ...(params ? [params] : [])] as const;
};

export const getWalletControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof walletControllerFindAll>>,
  TError = PaginatedWalletResponseDto,
>(
  params?: WalletControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWalletControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof walletControllerFindAll>>> = ({
    signal,
  }) => walletControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerFindAll>>
>;
export type WalletControllerFindAllQueryError = PaginatedWalletResponseDto;

export function useWalletControllerFindAll<
  TData = Awaited<ReturnType<typeof walletControllerFindAll>>,
  TError = PaginatedWalletResponseDto,
>(
  params: undefined | WalletControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof walletControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerFindAll<
  TData = Awaited<ReturnType<typeof walletControllerFindAll>>,
  TError = PaginatedWalletResponseDto,
>(
  params?: WalletControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof walletControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerFindAll<
  TData = Awaited<ReturnType<typeof walletControllerFindAll>>,
  TError = PaginatedWalletResponseDto,
>(
  params?: WalletControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWalletControllerFindAll<
  TData = Awaited<ReturnType<typeof walletControllerFindAll>>,
  TError = PaginatedWalletResponseDto,
>(
  params?: WalletControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWalletControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const walletControllerDetails = (
  params?: WalletControllerDetailsParams,
  signal?: AbortSignal
) => {
  return apiInstance<WalletControllerDetails200>({
    url: `/api/wallet/details`,
    method: 'GET',
    params,
    signal,
  });
};

export const getWalletControllerDetailsQueryKey = (params?: WalletControllerDetailsParams) => {
  return [`/api/wallet/details`, ...(params ? [params] : [])] as const;
};

export const getWalletControllerDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof walletControllerDetails>>,
  TError = WalletDetailsResponseDto,
>(
  params?: WalletControllerDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerDetails>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWalletControllerDetailsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof walletControllerDetails>>> = ({
    signal,
  }) => walletControllerDetails(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletControllerDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletControllerDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerDetails>>
>;
export type WalletControllerDetailsQueryError = WalletDetailsResponseDto;

export function useWalletControllerDetails<
  TData = Awaited<ReturnType<typeof walletControllerDetails>>,
  TError = WalletDetailsResponseDto,
>(
  params: undefined | WalletControllerDetailsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerDetails>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerDetails>>,
          TError,
          Awaited<ReturnType<typeof walletControllerDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerDetails<
  TData = Awaited<ReturnType<typeof walletControllerDetails>>,
  TError = WalletDetailsResponseDto,
>(
  params?: WalletControllerDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerDetails>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerDetails>>,
          TError,
          Awaited<ReturnType<typeof walletControllerDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerDetails<
  TData = Awaited<ReturnType<typeof walletControllerDetails>>,
  TError = WalletDetailsResponseDto,
>(
  params?: WalletControllerDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerDetails>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWalletControllerDetails<
  TData = Awaited<ReturnType<typeof walletControllerDetails>>,
  TError = WalletDetailsResponseDto,
>(
  params?: WalletControllerDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerDetails>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWalletControllerDetailsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const walletControllerFindOneByAdmin = (
  id: string,
  params?: WalletControllerFindOneByAdminParams,
  signal?: AbortSignal
) => {
  return apiInstance<WalletControllerFindOneByAdmin200>({
    url: `/api/wallet/${id}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getWalletControllerFindOneByAdminQueryKey = (
  id?: string,
  params?: WalletControllerFindOneByAdminParams
) => {
  return [`/api/wallet/${id}`, ...(params ? [params] : [])] as const;
};

export const getWalletControllerFindOneByAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
  TError = WalletDetailsResponseDto,
>(
  id: string,
  params?: WalletControllerFindOneByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWalletControllerFindOneByAdminQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>> = ({
    signal,
  }) => walletControllerFindOneByAdmin(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletControllerFindOneByAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>
>;
export type WalletControllerFindOneByAdminQueryError = WalletDetailsResponseDto;

export function useWalletControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
  TError = WalletDetailsResponseDto,
>(
  id: string,
  params: undefined | WalletControllerFindOneByAdminParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
  TError = WalletDetailsResponseDto,
>(
  id: string,
  params?: WalletControllerFindOneByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
  TError = WalletDetailsResponseDto,
>(
  id: string,
  params?: WalletControllerFindOneByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWalletControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>,
  TError = WalletDetailsResponseDto,
>(
  id: string,
  params?: WalletControllerFindOneByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerFindOneByAdmin>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWalletControllerFindOneByAdminQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const walletControllerGetQrcode = (id: string, signal?: AbortSignal) => {
  return apiInstance<File[]>({ url: `/api/wallet/${id}/qrcode`, method: 'GET', signal });
};

export const getWalletControllerGetQrcodeQueryKey = (id?: string) => {
  return [`/api/wallet/${id}/qrcode`] as const;
};

export const getWalletControllerGetQrcodeQueryOptions = <
  TData = Awaited<ReturnType<typeof walletControllerGetQrcode>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerGetQrcode>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWalletControllerGetQrcodeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof walletControllerGetQrcode>>> = ({
    signal,
  }) => walletControllerGetQrcode(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletControllerGetQrcode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletControllerGetQrcodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerGetQrcode>>
>;
export type WalletControllerGetQrcodeQueryError = unknown;

export function useWalletControllerGetQrcode<
  TData = Awaited<ReturnType<typeof walletControllerGetQrcode>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerGetQrcode>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerGetQrcode>>,
          TError,
          Awaited<ReturnType<typeof walletControllerGetQrcode>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerGetQrcode<
  TData = Awaited<ReturnType<typeof walletControllerGetQrcode>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerGetQrcode>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletControllerGetQrcode>>,
          TError,
          Awaited<ReturnType<typeof walletControllerGetQrcode>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletControllerGetQrcode<
  TData = Awaited<ReturnType<typeof walletControllerGetQrcode>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerGetQrcode>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWalletControllerGetQrcode<
  TData = Awaited<ReturnType<typeof walletControllerGetQrcode>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletControllerGetQrcode>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWalletControllerGetQrcodeQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const walletControllerIncreaseBalance = (userFundTransferDto: UserFundTransferDto) => {
  return apiInstance<Wallet>({
    url: `/api/wallet/increase-balance`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: userFundTransferDto,
  });
};

export const getWalletControllerIncreaseBalanceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerIncreaseBalance>>,
    TError,
    { data: UserFundTransferDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerIncreaseBalance>>,
  TError,
  { data: UserFundTransferDto },
  TContext
> => {
  const mutationKey = ['walletControllerIncreaseBalance'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerIncreaseBalance>>,
    { data: UserFundTransferDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerIncreaseBalance(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerIncreaseBalanceMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerIncreaseBalance>>
>;
export type WalletControllerIncreaseBalanceMutationBody = UserFundTransferDto;
export type WalletControllerIncreaseBalanceMutationError = unknown;

export const useWalletControllerIncreaseBalance = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerIncreaseBalance>>,
      TError,
      { data: UserFundTransferDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerIncreaseBalance>>,
  TError,
  { data: UserFundTransferDto },
  TContext
> => {
  const mutationOptions = getWalletControllerIncreaseBalanceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerDecreaseBalance = (userFundTransferDto: UserFundTransferDto) => {
  return apiInstance<Wallet>({
    url: `/api/wallet/decrease-balance`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: userFundTransferDto,
  });
};

export const getWalletControllerDecreaseBalanceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerDecreaseBalance>>,
    TError,
    { data: UserFundTransferDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerDecreaseBalance>>,
  TError,
  { data: UserFundTransferDto },
  TContext
> => {
  const mutationKey = ['walletControllerDecreaseBalance'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerDecreaseBalance>>,
    { data: UserFundTransferDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerDecreaseBalance(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerDecreaseBalanceMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerDecreaseBalance>>
>;
export type WalletControllerDecreaseBalanceMutationBody = UserFundTransferDto;
export type WalletControllerDecreaseBalanceMutationError = unknown;

export const useWalletControllerDecreaseBalance = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerDecreaseBalance>>,
      TError,
      { data: UserFundTransferDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerDecreaseBalance>>,
  TError,
  { data: UserFundTransferDto },
  TContext
> => {
  const mutationOptions = getWalletControllerDecreaseBalanceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerFundTransfer = (
  userFundTransferDto: UserFundTransferDto,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/fund-transfer`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: userFundTransferDto,
    signal,
  });
};

export const getWalletControllerFundTransferMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerFundTransfer>>,
    TError,
    { data: UserFundTransferDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerFundTransfer>>,
  TError,
  { data: UserFundTransferDto },
  TContext
> => {
  const mutationKey = ['walletControllerFundTransfer'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerFundTransfer>>,
    { data: UserFundTransferDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerFundTransfer(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerFundTransferMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerFundTransfer>>
>;
export type WalletControllerFundTransferMutationBody = UserFundTransferDto;
export type WalletControllerFundTransferMutationError = unknown;

export const useWalletControllerFundTransfer = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerFundTransfer>>,
      TError,
      { data: UserFundTransferDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerFundTransfer>>,
  TError,
  { data: UserFundTransferDto },
  TContext
> => {
  const mutationOptions = getWalletControllerFundTransferMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerAdminFundTransfer = (
  fundTransferDto: FundTransferDto,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/admin-fund-transfer`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: fundTransferDto,
    signal,
  });
};

export const getWalletControllerAdminFundTransferMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerAdminFundTransfer>>,
    TError,
    { data: FundTransferDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerAdminFundTransfer>>,
  TError,
  { data: FundTransferDto },
  TContext
> => {
  const mutationKey = ['walletControllerAdminFundTransfer'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerAdminFundTransfer>>,
    { data: FundTransferDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerAdminFundTransfer(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerAdminFundTransferMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerAdminFundTransfer>>
>;
export type WalletControllerAdminFundTransferMutationBody = FundTransferDto;
export type WalletControllerAdminFundTransferMutationError = unknown;

export const useWalletControllerAdminFundTransfer = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerAdminFundTransfer>>,
      TError,
      { data: FundTransferDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerAdminFundTransfer>>,
  TError,
  { data: FundTransferDto },
  TContext
> => {
  const mutationOptions = getWalletControllerAdminFundTransferMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerPayTreatmentPlan = (
  payTreatmentPlanDto: PayTreatmentPlanDto,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/pay-treatment-plan`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: payTreatmentPlanDto,
    signal,
  });
};

export const getWalletControllerPayTreatmentPlanMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerPayTreatmentPlan>>,
    TError,
    { data: PayTreatmentPlanDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerPayTreatmentPlan>>,
  TError,
  { data: PayTreatmentPlanDto },
  TContext
> => {
  const mutationKey = ['walletControllerPayTreatmentPlan'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerPayTreatmentPlan>>,
    { data: PayTreatmentPlanDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerPayTreatmentPlan(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerPayTreatmentPlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerPayTreatmentPlan>>
>;
export type WalletControllerPayTreatmentPlanMutationBody = PayTreatmentPlanDto;
export type WalletControllerPayTreatmentPlanMutationError = unknown;

export const useWalletControllerPayTreatmentPlan = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerPayTreatmentPlan>>,
      TError,
      { data: PayTreatmentPlanDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerPayTreatmentPlan>>,
  TError,
  { data: PayTreatmentPlanDto },
  TContext
> => {
  const mutationOptions = getWalletControllerPayTreatmentPlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerPayTreatmentPlanByAdmin = (
  payTreatmentPlanByAdminDto: PayTreatmentPlanByAdminDto,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/admin-pay-treatment-plan`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: payTreatmentPlanByAdminDto,
    signal,
  });
};

export const getWalletControllerPayTreatmentPlanByAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerPayTreatmentPlanByAdmin>>,
    TError,
    { data: PayTreatmentPlanByAdminDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerPayTreatmentPlanByAdmin>>,
  TError,
  { data: PayTreatmentPlanByAdminDto },
  TContext
> => {
  const mutationKey = ['walletControllerPayTreatmentPlanByAdmin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerPayTreatmentPlanByAdmin>>,
    { data: PayTreatmentPlanByAdminDto }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerPayTreatmentPlanByAdmin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerPayTreatmentPlanByAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerPayTreatmentPlanByAdmin>>
>;
export type WalletControllerPayTreatmentPlanByAdminMutationBody = PayTreatmentPlanByAdminDto;
export type WalletControllerPayTreatmentPlanByAdminMutationError = unknown;

export const useWalletControllerPayTreatmentPlanByAdmin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerPayTreatmentPlanByAdmin>>,
      TError,
      { data: PayTreatmentPlanByAdminDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerPayTreatmentPlanByAdmin>>,
  TError,
  { data: PayTreatmentPlanByAdminDto },
  TContext
> => {
  const mutationOptions = getWalletControllerPayTreatmentPlanByAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerRevertPayment = (
  paidTreatmentPlanId: string,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/revert-payment/${paidTreatmentPlanId}`,
    method: 'POST',
    signal,
  });
};

export const getWalletControllerRevertPaymentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerRevertPayment>>,
    TError,
    { paidTreatmentPlanId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerRevertPayment>>,
  TError,
  { paidTreatmentPlanId: string },
  TContext
> => {
  const mutationKey = ['walletControllerRevertPayment'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerRevertPayment>>,
    { paidTreatmentPlanId: string }
  > = (props) => {
    const { paidTreatmentPlanId } = props ?? {};

    return walletControllerRevertPayment(paidTreatmentPlanId);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerRevertPaymentMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerRevertPayment>>
>;

export type WalletControllerRevertPaymentMutationError = unknown;

export const useWalletControllerRevertPayment = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerRevertPayment>>,
      TError,
      { paidTreatmentPlanId: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerRevertPayment>>,
  TError,
  { paidTreatmentPlanId: string },
  TContext
> => {
  const mutationOptions = getWalletControllerRevertPaymentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerRevertPaymentByAdmin = (
  paidTreatmentPlanId: string,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/admin-revert-payment/${paidTreatmentPlanId}`,
    method: 'POST',
    signal,
  });
};

export const getWalletControllerRevertPaymentByAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerRevertPaymentByAdmin>>,
    TError,
    { paidTreatmentPlanId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerRevertPaymentByAdmin>>,
  TError,
  { paidTreatmentPlanId: string },
  TContext
> => {
  const mutationKey = ['walletControllerRevertPaymentByAdmin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerRevertPaymentByAdmin>>,
    { paidTreatmentPlanId: string }
  > = (props) => {
    const { paidTreatmentPlanId } = props ?? {};

    return walletControllerRevertPaymentByAdmin(paidTreatmentPlanId);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerRevertPaymentByAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerRevertPaymentByAdmin>>
>;

export type WalletControllerRevertPaymentByAdminMutationError = unknown;

export const useWalletControllerRevertPaymentByAdmin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerRevertPaymentByAdmin>>,
      TError,
      { paidTreatmentPlanId: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerRevertPaymentByAdmin>>,
  TError,
  { paidTreatmentPlanId: string },
  TContext
> => {
  const mutationOptions = getWalletControllerRevertPaymentByAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerPayPreInvoice = (
  payPreInvoice: PayPreInvoice,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/pay-pre-invoice`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: payPreInvoice,
    signal,
  });
};

export const getWalletControllerPayPreInvoiceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerPayPreInvoice>>,
    TError,
    { data: PayPreInvoice },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerPayPreInvoice>>,
  TError,
  { data: PayPreInvoice },
  TContext
> => {
  const mutationKey = ['walletControllerPayPreInvoice'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerPayPreInvoice>>,
    { data: PayPreInvoice }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerPayPreInvoice(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerPayPreInvoiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerPayPreInvoice>>
>;
export type WalletControllerPayPreInvoiceMutationBody = PayPreInvoice;
export type WalletControllerPayPreInvoiceMutationError = unknown;

export const useWalletControllerPayPreInvoice = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerPayPreInvoice>>,
      TError,
      { data: PayPreInvoice },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerPayPreInvoice>>,
  TError,
  { data: PayPreInvoice },
  TContext
> => {
  const mutationOptions = getWalletControllerPayPreInvoiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerPayPreInvoiceByAdmin = (
  payPreInvoice: PayPreInvoice,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/pay-pre-invoice-by-admin`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: payPreInvoice,
    signal,
  });
};

export const getWalletControllerPayPreInvoiceByAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerPayPreInvoiceByAdmin>>,
    TError,
    { data: PayPreInvoice },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerPayPreInvoiceByAdmin>>,
  TError,
  { data: PayPreInvoice },
  TContext
> => {
  const mutationKey = ['walletControllerPayPreInvoiceByAdmin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerPayPreInvoiceByAdmin>>,
    { data: PayPreInvoice }
  > = (props) => {
    const { data } = props ?? {};

    return walletControllerPayPreInvoiceByAdmin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerPayPreInvoiceByAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerPayPreInvoiceByAdmin>>
>;
export type WalletControllerPayPreInvoiceByAdminMutationBody = PayPreInvoice;
export type WalletControllerPayPreInvoiceByAdminMutationError = unknown;

export const useWalletControllerPayPreInvoiceByAdmin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerPayPreInvoiceByAdmin>>,
      TError,
      { data: PayPreInvoice },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerPayPreInvoiceByAdmin>>,
  TError,
  { data: PayPreInvoice },
  TContext
> => {
  const mutationOptions = getWalletControllerPayPreInvoiceByAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerRevertPreInvoice = (
  paidPreInvoiceId: string,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/revert-pre-invoice/${paidPreInvoiceId}`,
    method: 'POST',
    signal,
  });
};

export const getWalletControllerRevertPreInvoiceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerRevertPreInvoice>>,
    TError,
    { paidPreInvoiceId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerRevertPreInvoice>>,
  TError,
  { paidPreInvoiceId: string },
  TContext
> => {
  const mutationKey = ['walletControllerRevertPreInvoice'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerRevertPreInvoice>>,
    { paidPreInvoiceId: string }
  > = (props) => {
    const { paidPreInvoiceId } = props ?? {};

    return walletControllerRevertPreInvoice(paidPreInvoiceId);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerRevertPreInvoiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerRevertPreInvoice>>
>;

export type WalletControllerRevertPreInvoiceMutationError = unknown;

export const useWalletControllerRevertPreInvoice = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerRevertPreInvoice>>,
      TError,
      { paidPreInvoiceId: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerRevertPreInvoice>>,
  TError,
  { paidPreInvoiceId: string },
  TContext
> => {
  const mutationOptions = getWalletControllerRevertPreInvoiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const walletControllerRevertPreInvoiceByAdmin = (
  paidPreInvoiceId: string,
  signal?: AbortSignal
) => {
  return apiInstance<WalletTransaction>({
    url: `/api/wallet/admin-revert-pre-invoice/${paidPreInvoiceId}`,
    method: 'POST',
    signal,
  });
};

export const getWalletControllerRevertPreInvoiceByAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof walletControllerRevertPreInvoiceByAdmin>>,
    TError,
    { paidPreInvoiceId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof walletControllerRevertPreInvoiceByAdmin>>,
  TError,
  { paidPreInvoiceId: string },
  TContext
> => {
  const mutationKey = ['walletControllerRevertPreInvoiceByAdmin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof walletControllerRevertPreInvoiceByAdmin>>,
    { paidPreInvoiceId: string }
  > = (props) => {
    const { paidPreInvoiceId } = props ?? {};

    return walletControllerRevertPreInvoiceByAdmin(paidPreInvoiceId);
  };

  return { mutationFn, ...mutationOptions };
};

export type WalletControllerRevertPreInvoiceByAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof walletControllerRevertPreInvoiceByAdmin>>
>;

export type WalletControllerRevertPreInvoiceByAdminMutationError = unknown;

export const useWalletControllerRevertPreInvoiceByAdmin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof walletControllerRevertPreInvoiceByAdmin>>,
      TError,
      { paidPreInvoiceId: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof walletControllerRevertPreInvoiceByAdmin>>,
  TError,
  { paidPreInvoiceId: string },
  TContext
> => {
  const mutationOptions = getWalletControllerRevertPreInvoiceByAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
