/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateTicketAnswerDto,
  CreateTicketDto,
  PaginatedTicketResponseDto,
  Ticket,
  TicketAnswer,
  TicketControllerFindAllParams,
  TicketControllerFindMyParams,
  TicketControllerUpdateStatusParams,
  TicketResponseDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const ticketControllerCreate = (createTicketDto: CreateTicketDto, signal?: AbortSignal) => {
  const formData = new FormData();
  formData.append(`subject`, createTicketDto.subject);
  formData.append(`description`, createTicketDto.description);
  if (createTicketDto.priority !== undefined) {
    formData.append(`priority`, createTicketDto.priority);
  }
  formData.append(`categoryId`, createTicketDto.categoryId);

  return apiInstance<Ticket>({
    url: `/api/tickets`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getTicketControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketControllerCreate>>,
    TError,
    { data: CreateTicketDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketControllerCreate>>,
  TError,
  { data: CreateTicketDto },
  TContext
> => {
  const mutationKey = ['ticketControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketControllerCreate>>,
    { data: CreateTicketDto }
  > = (props) => {
    const { data } = props ?? {};

    return ticketControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerCreate>>
>;
export type TicketControllerCreateMutationBody = CreateTicketDto;
export type TicketControllerCreateMutationError = unknown;

export const useTicketControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketControllerCreate>>,
      TError,
      { data: CreateTicketDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketControllerCreate>>,
  TError,
  { data: CreateTicketDto },
  TContext
> => {
  const mutationOptions = getTicketControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const ticketControllerFindAll = (
  params?: TicketControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/tickets`, method: 'GET', params, signal });
};

export const getTicketControllerFindAllQueryKey = (params?: TicketControllerFindAllParams) => {
  return [`/api/tickets`, ...(params ? [params] : [])] as const;
};

export const getTicketControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketControllerFindAll>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketControllerFindAll>>> = ({
    signal,
  }) => ticketControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TicketControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerFindAll>>
>;
export type TicketControllerFindAllQueryError = PaginatedTicketResponseDto;

export function useTicketControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketControllerFindAll>>,
  TError = PaginatedTicketResponseDto,
>(
  params: undefined | TicketControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketControllerFindAll>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketControllerFindAll>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useTicketControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketControllerFindAll>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTicketControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ticketControllerFindMy = (
  params?: TicketControllerFindMyParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/tickets/mine`, method: 'GET', params, signal });
};

export const getTicketControllerFindMyQueryKey = (params?: TicketControllerFindMyParams) => {
  return [`/api/tickets/mine`, ...(params ? [params] : [])] as const;
};

export const getTicketControllerFindMyQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketControllerFindMy>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindMy>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketControllerFindMyQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketControllerFindMy>>> = ({ signal }) =>
    ticketControllerFindMy(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketControllerFindMy>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TicketControllerFindMyQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerFindMy>>
>;
export type TicketControllerFindMyQueryError = PaginatedTicketResponseDto;

export function useTicketControllerFindMy<
  TData = Awaited<ReturnType<typeof ticketControllerFindMy>>,
  TError = PaginatedTicketResponseDto,
>(
  params: undefined | TicketControllerFindMyParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindMy>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindMy>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindMy>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindMy<
  TData = Awaited<ReturnType<typeof ticketControllerFindMy>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindMy>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindMy>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindMy>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindMy<
  TData = Awaited<ReturnType<typeof ticketControllerFindMy>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindMy>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useTicketControllerFindMy<
  TData = Awaited<ReturnType<typeof ticketControllerFindMy>>,
  TError = PaginatedTicketResponseDto,
>(
  params?: TicketControllerFindMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindMy>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTicketControllerFindMyQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ticketControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Ticket>({ url: `/api/tickets/${id}`, method: 'GET', signal });
};

export const getTicketControllerFindOneQueryKey = (id?: string) => {
  return [`/api/tickets/${id}`] as const;
};

export const getTicketControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketControllerFindOne>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketControllerFindOne>>> = ({
    signal,
  }) => ticketControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TicketControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerFindOne>>
>;
export type TicketControllerFindOneQueryError = TicketResponseDto;

export function useTicketControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketControllerFindOne>>,
  TError = TicketResponseDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketControllerFindOne>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketControllerFindOne>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useTicketControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketControllerFindOne>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTicketControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ticketControllerFindOneByAdmin = (id: string, signal?: AbortSignal) => {
  return apiInstance<Ticket>({ url: `/api/tickets/${id}/admin`, method: 'GET', signal });
};

export const getTicketControllerFindOneByAdminQueryKey = (id?: string) => {
  return [`/api/tickets/${id}/admin`] as const;
};

export const getTicketControllerFindOneByAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketControllerFindOneByAdminQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>> = ({
    signal,
  }) => ticketControllerFindOneByAdmin(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TicketControllerFindOneByAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>
>;
export type TicketControllerFindOneByAdminQueryError = TicketResponseDto;

export function useTicketControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
  TError = TicketResponseDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useTicketControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>,
  TError = TicketResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketControllerFindOneByAdmin>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTicketControllerFindOneByAdminQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ticketControllerAnswer = (
  createTicketAnswerDto: CreateTicketAnswerDto,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  formData.append(`answer`, createTicketAnswerDto.answer);
  if (createTicketAnswerDto.ticketId !== undefined) {
    formData.append(`ticketId`, createTicketAnswerDto.ticketId);
  }
  if (createTicketAnswerDto.replyTo !== undefined) {
    formData.append(`replyTo`, createTicketAnswerDto.replyTo);
  }

  return apiInstance<TicketAnswer>({
    url: `/api/tickets/answer`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getTicketControllerAnswerMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketControllerAnswer>>,
    TError,
    { data: CreateTicketAnswerDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketControllerAnswer>>,
  TError,
  { data: CreateTicketAnswerDto },
  TContext
> => {
  const mutationKey = ['ticketControllerAnswer'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketControllerAnswer>>,
    { data: CreateTicketAnswerDto }
  > = (props) => {
    const { data } = props ?? {};

    return ticketControllerAnswer(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketControllerAnswerMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerAnswer>>
>;
export type TicketControllerAnswerMutationBody = CreateTicketAnswerDto;
export type TicketControllerAnswerMutationError = unknown;

export const useTicketControllerAnswer = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketControllerAnswer>>,
      TError,
      { data: CreateTicketAnswerDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketControllerAnswer>>,
  TError,
  { data: CreateTicketAnswerDto },
  TContext
> => {
  const mutationOptions = getTicketControllerAnswerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const ticketControllerUpdateStatus = (params: TicketControllerUpdateStatusParams) => {
  return apiInstance<Ticket>({ url: `/api/tickets/status`, method: 'PATCH', params });
};

export const getTicketControllerUpdateStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketControllerUpdateStatus>>,
    TError,
    { params: TicketControllerUpdateStatusParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketControllerUpdateStatus>>,
  TError,
  { params: TicketControllerUpdateStatusParams },
  TContext
> => {
  const mutationKey = ['ticketControllerUpdateStatus'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketControllerUpdateStatus>>,
    { params: TicketControllerUpdateStatusParams }
  > = (props) => {
    const { params } = props ?? {};

    return ticketControllerUpdateStatus(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketControllerUpdateStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerUpdateStatus>>
>;

export type TicketControllerUpdateStatusMutationError = unknown;

export const useTicketControllerUpdateStatus = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketControllerUpdateStatus>>,
      TError,
      { params: TicketControllerUpdateStatusParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketControllerUpdateStatus>>,
  TError,
  { params: TicketControllerUpdateStatusParams },
  TContext
> => {
  const mutationOptions = getTicketControllerUpdateStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const ticketControllerClose = (id: string) => {
  return apiInstance<Ticket>({ url: `/api/tickets/${id}/close`, method: 'PUT' });
};

export const getTicketControllerCloseMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketControllerClose>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketControllerClose>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['ticketControllerClose'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketControllerClose>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ticketControllerClose(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketControllerCloseMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketControllerClose>>
>;

export type TicketControllerCloseMutationError = unknown;

export const useTicketControllerClose = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketControllerClose>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketControllerClose>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getTicketControllerCloseMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
