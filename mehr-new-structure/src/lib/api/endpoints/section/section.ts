/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AttachPersonnelDto,
  CreateSectionDto,
  DetachPersonnelDto,
  PaginatedSectionResponse,
  Section,
  SectionControllerFindAllParams,
  UpdateSectionDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const sectionControllerCreate = (
  createSectionDto: CreateSectionDto,
  signal?: AbortSignal
) => {
  return apiInstance<Section>({
    url: `/api/sections`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createSectionDto,
    signal,
  });
};

export const getSectionControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sectionControllerCreate>>,
    TError,
    { data: CreateSectionDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sectionControllerCreate>>,
  TError,
  { data: CreateSectionDto },
  TContext
> => {
  const mutationKey = ['sectionControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sectionControllerCreate>>,
    { data: CreateSectionDto }
  > = (props) => {
    const { data } = props ?? {};

    return sectionControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SectionControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerCreate>>
>;
export type SectionControllerCreateMutationBody = CreateSectionDto;
export type SectionControllerCreateMutationError = unknown;

export const useSectionControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sectionControllerCreate>>,
      TError,
      { data: CreateSectionDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof sectionControllerCreate>>,
  TError,
  { data: CreateSectionDto },
  TContext
> => {
  const mutationOptions = getSectionControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const sectionControllerFindAll = (
  params?: SectionControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedSectionResponse>({
    url: `/api/sections`,
    method: 'GET',
    params,
    signal,
  });
};

export const getSectionControllerFindAllQueryKey = (params?: SectionControllerFindAllParams) => {
  return [`/api/sections`, ...(params ? [params] : [])] as const;
};

export const getSectionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof sectionControllerFindAll>>,
  TError = unknown,
>(
  params?: SectionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSectionControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof sectionControllerFindAll>>> = ({
    signal,
  }) => sectionControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof sectionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SectionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerFindAll>>
>;
export type SectionControllerFindAllQueryError = unknown;

export function useSectionControllerFindAll<
  TData = Awaited<ReturnType<typeof sectionControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | SectionControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sectionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof sectionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSectionControllerFindAll<
  TData = Awaited<ReturnType<typeof sectionControllerFindAll>>,
  TError = unknown,
>(
  params?: SectionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sectionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof sectionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSectionControllerFindAll<
  TData = Awaited<ReturnType<typeof sectionControllerFindAll>>,
  TError = unknown,
>(
  params?: SectionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSectionControllerFindAll<
  TData = Awaited<ReturnType<typeof sectionControllerFindAll>>,
  TError = unknown,
>(
  params?: SectionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSectionControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const sectionControllerAssignPersonnel = (
  attachPersonnelDto: AttachPersonnelDto,
  signal?: AbortSignal
) => {
  return apiInstance<Section>({
    url: `/api/sections/assign-personnel`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: attachPersonnelDto,
    signal,
  });
};

export const getSectionControllerAssignPersonnelMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sectionControllerAssignPersonnel>>,
    TError,
    { data: AttachPersonnelDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sectionControllerAssignPersonnel>>,
  TError,
  { data: AttachPersonnelDto },
  TContext
> => {
  const mutationKey = ['sectionControllerAssignPersonnel'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sectionControllerAssignPersonnel>>,
    { data: AttachPersonnelDto }
  > = (props) => {
    const { data } = props ?? {};

    return sectionControllerAssignPersonnel(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SectionControllerAssignPersonnelMutationResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerAssignPersonnel>>
>;
export type SectionControllerAssignPersonnelMutationBody = AttachPersonnelDto;
export type SectionControllerAssignPersonnelMutationError = unknown;

export const useSectionControllerAssignPersonnel = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sectionControllerAssignPersonnel>>,
      TError,
      { data: AttachPersonnelDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof sectionControllerAssignPersonnel>>,
  TError,
  { data: AttachPersonnelDto },
  TContext
> => {
  const mutationOptions = getSectionControllerAssignPersonnelMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const sectionControllerDismissPersonnel = (detachPersonnelDto: DetachPersonnelDto) => {
  return apiInstance<Section>({
    url: `/api/sections/dismiss-personnel`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: detachPersonnelDto,
  });
};

export const getSectionControllerDismissPersonnelMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sectionControllerDismissPersonnel>>,
    TError,
    { data: DetachPersonnelDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sectionControllerDismissPersonnel>>,
  TError,
  { data: DetachPersonnelDto },
  TContext
> => {
  const mutationKey = ['sectionControllerDismissPersonnel'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sectionControllerDismissPersonnel>>,
    { data: DetachPersonnelDto }
  > = (props) => {
    const { data } = props ?? {};

    return sectionControllerDismissPersonnel(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SectionControllerDismissPersonnelMutationResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerDismissPersonnel>>
>;
export type SectionControllerDismissPersonnelMutationBody = DetachPersonnelDto;
export type SectionControllerDismissPersonnelMutationError = unknown;

export const useSectionControllerDismissPersonnel = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sectionControllerDismissPersonnel>>,
      TError,
      { data: DetachPersonnelDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof sectionControllerDismissPersonnel>>,
  TError,
  { data: DetachPersonnelDto },
  TContext
> => {
  const mutationOptions = getSectionControllerDismissPersonnelMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const sectionControllerUpdate = (id: string, updateSectionDto: UpdateSectionDto) => {
  return apiInstance<Section>({
    url: `/api/sections/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateSectionDto,
  });
};

export const getSectionControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sectionControllerUpdate>>,
    TError,
    { id: string; data: UpdateSectionDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sectionControllerUpdate>>,
  TError,
  { id: string; data: UpdateSectionDto },
  TContext
> => {
  const mutationKey = ['sectionControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sectionControllerUpdate>>,
    { id: string; data: UpdateSectionDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return sectionControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SectionControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerUpdate>>
>;
export type SectionControllerUpdateMutationBody = UpdateSectionDto;
export type SectionControllerUpdateMutationError = unknown;

export const useSectionControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sectionControllerUpdate>>,
      TError,
      { id: string; data: UpdateSectionDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof sectionControllerUpdate>>,
  TError,
  { id: string; data: UpdateSectionDto },
  TContext
> => {
  const mutationOptions = getSectionControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const sectionControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Section>({ url: `/api/sections/${id}`, method: 'GET', signal });
};

export const getSectionControllerFindOneQueryKey = (id?: string) => {
  return [`/api/sections/${id}`] as const;
};

export const getSectionControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof sectionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSectionControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof sectionControllerFindOne>>> = ({
    signal,
  }) => sectionControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof sectionControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SectionControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerFindOne>>
>;
export type SectionControllerFindOneQueryError = unknown;

export function useSectionControllerFindOne<
  TData = Awaited<ReturnType<typeof sectionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sectionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof sectionControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSectionControllerFindOne<
  TData = Awaited<ReturnType<typeof sectionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sectionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof sectionControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSectionControllerFindOne<
  TData = Awaited<ReturnType<typeof sectionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSectionControllerFindOne<
  TData = Awaited<ReturnType<typeof sectionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof sectionControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSectionControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const sectionControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/sections/${id}`, method: 'DELETE' });
};

export const getSectionControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sectionControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sectionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['sectionControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sectionControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return sectionControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SectionControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof sectionControllerRemove>>
>;

export type SectionControllerRemoveMutationError = unknown;

export const useSectionControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sectionControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof sectionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getSectionControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
