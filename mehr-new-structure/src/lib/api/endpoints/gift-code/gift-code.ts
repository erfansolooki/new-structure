/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AdminExchangeGiftCodeDto,
  CreateGiftCodeDto,
  ExchangeGiftCodeDto,
  GiftCodeControllerFindAllParams,
  GiftCodeControllerFindMineParams,
  GiftCodeEntity,
  PaginatedGiftCodeResponse,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const giftCodeControllerCreate = (
  createGiftCodeDto: CreateGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<GiftCodeEntity>({
    url: `/api/gift-codes`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerCreateMutationOptions = <
  TError = GiftCodeEntity,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerCreate>>,
    TError,
    { data: CreateGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerCreate>>,
  TError,
  { data: CreateGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerCreate>>,
    { data: CreateGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerCreate>>
>;
export type GiftCodeControllerCreateMutationBody = CreateGiftCodeDto;
export type GiftCodeControllerCreateMutationError = GiftCodeEntity;

export const useGiftCodeControllerCreate = <TError = GiftCodeEntity, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerCreate>>,
      TError,
      { data: CreateGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerCreate>>,
  TError,
  { data: CreateGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerFindAll = (
  params?: GiftCodeControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedGiftCodeResponse>({
    url: `/api/gift-codes`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGiftCodeControllerFindAllQueryKey = (params?: GiftCodeControllerFindAllParams) => {
  return [`/api/gift-codes`, ...(params ? [params] : [])] as const;
};

export const getGiftCodeControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGiftCodeControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof giftCodeControllerFindAll>>> = ({
    signal,
  }) => giftCodeControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GiftCodeControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerFindAll>>
>;
export type GiftCodeControllerFindAllQueryError = unknown;

export function useGiftCodeControllerFindAll<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | GiftCodeControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof giftCodeControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGiftCodeControllerFindAll<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof giftCodeControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGiftCodeControllerFindAll<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGiftCodeControllerFindAll<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindAll>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGiftCodeControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const giftCodeControllerFindMine = (
  params?: GiftCodeControllerFindMineParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedGiftCodeResponse>({
    url: `/api/gift-codes/mine`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGiftCodeControllerFindMineQueryKey = (
  params?: GiftCodeControllerFindMineParams
) => {
  return [`/api/gift-codes/mine`, ...(params ? [params] : [])] as const;
};

export const getGiftCodeControllerFindMineQueryOptions = <
  TData = Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindMine>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGiftCodeControllerFindMineQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof giftCodeControllerFindMine>>> = ({
    signal,
  }) => giftCodeControllerFindMine(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GiftCodeControllerFindMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerFindMine>>
>;
export type GiftCodeControllerFindMineQueryError = unknown;

export function useGiftCodeControllerFindMine<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
  TError = unknown,
>(
  params: undefined | GiftCodeControllerFindMineParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindMine>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof giftCodeControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGiftCodeControllerFindMine<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindMine>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof giftCodeControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGiftCodeControllerFindMine<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGiftCodeControllerFindMine<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindMine>>,
  TError = unknown,
>(
  params?: GiftCodeControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGiftCodeControllerFindMineQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const giftCodeControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<GiftCodeEntity>({ url: `/api/gift-codes/${id}`, method: 'GET', signal });
};

export const getGiftCodeControllerFindOneQueryKey = (id?: string) => {
  return [`/api/gift-codes/${id}`] as const;
};

export const getGiftCodeControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGiftCodeControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof giftCodeControllerFindOne>>> = ({
    signal,
  }) => giftCodeControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GiftCodeControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerFindOne>>
>;
export type GiftCodeControllerFindOneQueryError = unknown;

export function useGiftCodeControllerFindOne<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof giftCodeControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGiftCodeControllerFindOne<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof giftCodeControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGiftCodeControllerFindOne<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGiftCodeControllerFindOne<
  TData = Awaited<ReturnType<typeof giftCodeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof giftCodeControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGiftCodeControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const giftCodeControllerDisable = (id: string) => {
  return apiInstance<GiftCodeEntity>({ url: `/api/gift-codes/${id}/disable`, method: 'PUT' });
};

export const getGiftCodeControllerDisableMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerDisable>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerDisable>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['giftCodeControllerDisable'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerDisable>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return giftCodeControllerDisable(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerDisableMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerDisable>>
>;

export type GiftCodeControllerDisableMutationError = unknown;

export const useGiftCodeControllerDisable = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerDisable>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerDisable>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerDisableMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerExchangeDiscount = (
  exchangeGiftCodeDto: ExchangeGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/gift-codes/exchange/discount`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: exchangeGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerExchangeDiscountMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerExchangeDiscount>>,
    TError,
    { data: ExchangeGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerExchangeDiscount>>,
  TError,
  { data: ExchangeGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerExchangeDiscount'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerExchangeDiscount>>,
    { data: ExchangeGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerExchangeDiscount(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerExchangeDiscountMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerExchangeDiscount>>
>;
export type GiftCodeControllerExchangeDiscountMutationBody = ExchangeGiftCodeDto;
export type GiftCodeControllerExchangeDiscountMutationError = unknown;

export const useGiftCodeControllerExchangeDiscount = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerExchangeDiscount>>,
      TError,
      { data: ExchangeGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerExchangeDiscount>>,
  TError,
  { data: ExchangeGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerExchangeDiscountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerExchangeCredit = (
  exchangeGiftCodeDto: ExchangeGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/gift-codes/exchange/credit`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: exchangeGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerExchangeCreditMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerExchangeCredit>>,
    TError,
    { data: ExchangeGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerExchangeCredit>>,
  TError,
  { data: ExchangeGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerExchangeCredit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerExchangeCredit>>,
    { data: ExchangeGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerExchangeCredit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerExchangeCreditMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerExchangeCredit>>
>;
export type GiftCodeControllerExchangeCreditMutationBody = ExchangeGiftCodeDto;
export type GiftCodeControllerExchangeCreditMutationError = unknown;

export const useGiftCodeControllerExchangeCredit = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerExchangeCredit>>,
      TError,
      { data: ExchangeGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerExchangeCredit>>,
  TError,
  { data: ExchangeGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerExchangeCreditMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerExchangeScore = (
  exchangeGiftCodeDto: ExchangeGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/gift-codes/exchange/score`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: exchangeGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerExchangeScoreMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerExchangeScore>>,
    TError,
    { data: ExchangeGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerExchangeScore>>,
  TError,
  { data: ExchangeGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerExchangeScore'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerExchangeScore>>,
    { data: ExchangeGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerExchangeScore(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerExchangeScoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerExchangeScore>>
>;
export type GiftCodeControllerExchangeScoreMutationBody = ExchangeGiftCodeDto;
export type GiftCodeControllerExchangeScoreMutationError = unknown;

export const useGiftCodeControllerExchangeScore = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerExchangeScore>>,
      TError,
      { data: ExchangeGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerExchangeScore>>,
  TError,
  { data: ExchangeGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerExchangeScoreMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerDisableRecent = (id: string) => {
  return apiInstance<GiftCodeEntity>({
    url: `/api/gift-codes/${id}/disable/recent`,
    method: 'PUT',
  });
};

export const getGiftCodeControllerDisableRecentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerDisableRecent>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerDisableRecent>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['giftCodeControllerDisableRecent'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerDisableRecent>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return giftCodeControllerDisableRecent(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerDisableRecentMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerDisableRecent>>
>;

export type GiftCodeControllerDisableRecentMutationError = unknown;

export const useGiftCodeControllerDisableRecent = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerDisableRecent>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerDisableRecent>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerDisableRecentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerAdminExchangeDiscount = (
  adminExchangeGiftCodeDto: AdminExchangeGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/gift-codes/admin/exchange/discount`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: adminExchangeGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerAdminExchangeDiscountMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerAdminExchangeDiscount>>,
    TError,
    { data: AdminExchangeGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeDiscount>>,
  TError,
  { data: AdminExchangeGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerAdminExchangeDiscount'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerAdminExchangeDiscount>>,
    { data: AdminExchangeGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerAdminExchangeDiscount(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerAdminExchangeDiscountMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeDiscount>>
>;
export type GiftCodeControllerAdminExchangeDiscountMutationBody = AdminExchangeGiftCodeDto;
export type GiftCodeControllerAdminExchangeDiscountMutationError = unknown;

export const useGiftCodeControllerAdminExchangeDiscount = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerAdminExchangeDiscount>>,
      TError,
      { data: AdminExchangeGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeDiscount>>,
  TError,
  { data: AdminExchangeGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerAdminExchangeDiscountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerAdminExchangeCredit = (
  adminExchangeGiftCodeDto: AdminExchangeGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/gift-codes/admin/exchange/credit`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: adminExchangeGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerAdminExchangeCreditMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerAdminExchangeCredit>>,
    TError,
    { data: AdminExchangeGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeCredit>>,
  TError,
  { data: AdminExchangeGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerAdminExchangeCredit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerAdminExchangeCredit>>,
    { data: AdminExchangeGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerAdminExchangeCredit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerAdminExchangeCreditMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeCredit>>
>;
export type GiftCodeControllerAdminExchangeCreditMutationBody = AdminExchangeGiftCodeDto;
export type GiftCodeControllerAdminExchangeCreditMutationError = unknown;

export const useGiftCodeControllerAdminExchangeCredit = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerAdminExchangeCredit>>,
      TError,
      { data: AdminExchangeGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeCredit>>,
  TError,
  { data: AdminExchangeGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerAdminExchangeCreditMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const giftCodeControllerAdminExchangeScore = (
  adminExchangeGiftCodeDto: AdminExchangeGiftCodeDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/gift-codes/admin/exchange/score`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: adminExchangeGiftCodeDto,
    signal,
  });
};

export const getGiftCodeControllerAdminExchangeScoreMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof giftCodeControllerAdminExchangeScore>>,
    TError,
    { data: AdminExchangeGiftCodeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeScore>>,
  TError,
  { data: AdminExchangeGiftCodeDto },
  TContext
> => {
  const mutationKey = ['giftCodeControllerAdminExchangeScore'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof giftCodeControllerAdminExchangeScore>>,
    { data: AdminExchangeGiftCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return giftCodeControllerAdminExchangeScore(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GiftCodeControllerAdminExchangeScoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeScore>>
>;
export type GiftCodeControllerAdminExchangeScoreMutationBody = AdminExchangeGiftCodeDto;
export type GiftCodeControllerAdminExchangeScoreMutationError = unknown;

export const useGiftCodeControllerAdminExchangeScore = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof giftCodeControllerAdminExchangeScore>>,
      TError,
      { data: AdminExchangeGiftCodeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof giftCodeControllerAdminExchangeScore>>,
  TError,
  { data: AdminExchangeGiftCodeDto },
  TContext
> => {
  const mutationOptions = getGiftCodeControllerAdminExchangeScoreMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
