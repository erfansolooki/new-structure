/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { AddressControllerFindCitiesParams } from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const ADDRESS_URLS = {
  FIND_ALL_PROVINCES: '/api/address/provinces',
  FIND_CITIES: '/api/address/cities',
};

export const addressControllerFindAllProvinces = (signal?: AbortSignal) => {
  return apiInstance<string[]>({ url: ADDRESS_URLS.FIND_ALL_PROVINCES, method: 'GET', signal });
};

export const getAddressControllerFindAllProvincesQueryKey = () => {
  return [ADDRESS_URLS.FIND_ALL_PROVINCES] as const;
};

export const getAddressControllerFindAllProvincesQueryOptions = <
  TData = Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAllProvinces>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAddressControllerFindAllProvincesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof addressControllerFindAllProvinces>>> = ({
    signal,
  }) => addressControllerFindAllProvinces(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AddressControllerFindAllProvincesQueryResult = NonNullable<
  Awaited<ReturnType<typeof addressControllerFindAllProvinces>>
>;
export type AddressControllerFindAllProvincesQueryError = unknown;

export function useAddressControllerFindAllProvinces<
  TData = Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAllProvinces>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindAllProvinces>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAddressControllerFindAllProvinces<
  TData = Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAllProvinces>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindAllProvinces>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAddressControllerFindAllProvinces<
  TData = Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAllProvinces>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAddressControllerFindAllProvinces<
  TData = Awaited<ReturnType<typeof addressControllerFindAllProvinces>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAllProvinces>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAddressControllerFindAllProvincesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addressControllerFindCities = (
  params: AddressControllerFindCitiesParams,
  signal?: AbortSignal
) => {
  return apiInstance<string[]>({ url: ADDRESS_URLS.FIND_CITIES, method: 'GET', params, signal });
};

export const getAddressControllerFindCitiesQueryKey = (
  params?: AddressControllerFindCitiesParams
) => {
  return [ADDRESS_URLS.FIND_CITIES, ...(params ? [params] : [])] as const;
};

export const getAddressControllerFindCitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof addressControllerFindCities>>,
  TError = unknown,
>(
  params: AddressControllerFindCitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindCities>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAddressControllerFindCitiesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof addressControllerFindCities>>> = ({
    signal,
  }) => addressControllerFindCities(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof addressControllerFindCities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AddressControllerFindCitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof addressControllerFindCities>>
>;
export type AddressControllerFindCitiesQueryError = unknown;

export function useAddressControllerFindCities<
  TData = Awaited<ReturnType<typeof addressControllerFindCities>>,
  TError = unknown,
>(
  params: AddressControllerFindCitiesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindCities>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindCities>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindCities>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAddressControllerFindCities<
  TData = Awaited<ReturnType<typeof addressControllerFindCities>>,
  TError = unknown,
>(
  params: AddressControllerFindCitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindCities>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindCities>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindCities>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAddressControllerFindCities<
  TData = Awaited<ReturnType<typeof addressControllerFindCities>>,
  TError = unknown,
>(
  params: AddressControllerFindCitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindCities>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAddressControllerFindCities<
  TData = Awaited<ReturnType<typeof addressControllerFindCities>>,
  TError = unknown,
>(
  params: AddressControllerFindCitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindCities>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAddressControllerFindCitiesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
