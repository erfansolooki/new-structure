/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  PaidInvoice,
  PaidInvoiceControllerFindAllParams,
  PaidInvoiceControllerFindMineParams,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const paidInvoiceControllerFindAll = (
  params?: PaidInvoiceControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/paid-invoices`, method: 'GET', params, signal });
};

export const getPaidInvoiceControllerFindAllQueryKey = (
  params?: PaidInvoiceControllerFindAllParams
) => {
  return [`/api/paid-invoices`, ...(params ? [params] : [])] as const;
};

export const getPaidInvoiceControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidInvoiceControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>> = ({
    signal,
  }) => paidInvoiceControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidInvoiceControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>
>;
export type PaidInvoiceControllerFindAllQueryError = unknown;

export function usePaidInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | PaidInvoiceControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidInvoiceControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paidInvoiceControllerFindMine = (
  params?: PaidInvoiceControllerFindMineParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/paid-invoices/mine`, method: 'GET', params, signal });
};

export const getPaidInvoiceControllerFindMineQueryKey = (
  params?: PaidInvoiceControllerFindMineParams
) => {
  return [`/api/paid-invoices/mine`, ...(params ? [params] : [])] as const;
};

export const getPaidInvoiceControllerFindMineQueryOptions = <
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidInvoiceControllerFindMineQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>> = ({
    signal,
  }) => paidInvoiceControllerFindMine(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidInvoiceControllerFindMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>
>;
export type PaidInvoiceControllerFindMineQueryError = unknown;

export function usePaidInvoiceControllerFindMine<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
  TError = unknown,
>(
  params: undefined | PaidInvoiceControllerFindMineParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindMine<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindMine<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidInvoiceControllerFindMine<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidInvoiceControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidInvoiceControllerFindMineQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paidInvoiceControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<PaidInvoice>({ url: `/api/paid-invoices/${id}`, method: 'GET', signal });
};

export const getPaidInvoiceControllerFindOneQueryKey = (id?: string) => {
  return [`/api/paid-invoices/${id}`] as const;
};

export const getPaidInvoiceControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidInvoiceControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>> = ({
    signal,
  }) => paidInvoiceControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidInvoiceControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>
>;
export type PaidInvoiceControllerFindOneQueryError = unknown;

export function usePaidInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidInvoiceControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidInvoiceControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paidInvoiceControllerFindOneByAdmin = (id: string, signal?: AbortSignal) => {
  return apiInstance<PaidInvoice>({ url: `/api/paid-invoices/${id}/admin`, method: 'GET', signal });
};

export const getPaidInvoiceControllerFindOneByAdminQueryKey = (id?: string) => {
  return [`/api/paid-invoices/${id}/admin`] as const;
};

export const getPaidInvoiceControllerFindOneByAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidInvoiceControllerFindOneByAdminQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>> = ({
    signal,
  }) => paidInvoiceControllerFindOneByAdmin(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidInvoiceControllerFindOneByAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>
>;
export type PaidInvoiceControllerFindOneByAdminQueryError = unknown;

export function usePaidInvoiceControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidInvoiceControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidInvoiceControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidInvoiceControllerFindOneByAdmin>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidInvoiceControllerFindOneByAdminQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
