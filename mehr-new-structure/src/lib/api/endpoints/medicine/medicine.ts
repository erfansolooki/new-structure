/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateMedicineDto,
  Medicine,
  MedicineControllerFindAllParams,
  MedicinePaginatedResopnse,
  UpdateMedicineDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const medicineControllerCreate = (
  createMedicineDto: CreateMedicineDto,
  signal?: AbortSignal
) => {
  return apiInstance<Medicine>({
    url: `/api/medicines`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createMedicineDto,
    signal,
  });
};

export const getMedicineControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof medicineControllerCreate>>,
    TError,
    { data: CreateMedicineDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof medicineControllerCreate>>,
  TError,
  { data: CreateMedicineDto },
  TContext
> => {
  const mutationKey = ['medicineControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof medicineControllerCreate>>,
    { data: CreateMedicineDto }
  > = (props) => {
    const { data } = props ?? {};

    return medicineControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type MedicineControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof medicineControllerCreate>>
>;
export type MedicineControllerCreateMutationBody = CreateMedicineDto;
export type MedicineControllerCreateMutationError = unknown;

export const useMedicineControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof medicineControllerCreate>>,
      TError,
      { data: CreateMedicineDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof medicineControllerCreate>>,
  TError,
  { data: CreateMedicineDto },
  TContext
> => {
  const mutationOptions = getMedicineControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const medicineControllerFindAll = (
  params?: MedicineControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/medicines`, method: 'GET', params, signal });
};

export const getMedicineControllerFindAllQueryKey = (params?: MedicineControllerFindAllParams) => {
  return [`/api/medicines`, ...(params ? [params] : [])] as const;
};

export const getMedicineControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof medicineControllerFindAll>>,
  TError = MedicinePaginatedResopnse,
>(
  params?: MedicineControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMedicineControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof medicineControllerFindAll>>> = ({
    signal,
  }) => medicineControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof medicineControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MedicineControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof medicineControllerFindAll>>
>;
export type MedicineControllerFindAllQueryError = MedicinePaginatedResopnse;

export function useMedicineControllerFindAll<
  TData = Awaited<ReturnType<typeof medicineControllerFindAll>>,
  TError = MedicinePaginatedResopnse,
>(
  params: undefined | MedicineControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof medicineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof medicineControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useMedicineControllerFindAll<
  TData = Awaited<ReturnType<typeof medicineControllerFindAll>>,
  TError = MedicinePaginatedResopnse,
>(
  params?: MedicineControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof medicineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof medicineControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useMedicineControllerFindAll<
  TData = Awaited<ReturnType<typeof medicineControllerFindAll>>,
  TError = MedicinePaginatedResopnse,
>(
  params?: MedicineControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useMedicineControllerFindAll<
  TData = Awaited<ReturnType<typeof medicineControllerFindAll>>,
  TError = MedicinePaginatedResopnse,
>(
  params?: MedicineControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getMedicineControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const medicineControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Medicine>({ url: `/api/medicines/${id}`, method: 'GET', signal });
};

export const getMedicineControllerFindOneQueryKey = (id?: string) => {
  return [`/api/medicines/${id}`] as const;
};

export const getMedicineControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof medicineControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMedicineControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof medicineControllerFindOne>>> = ({
    signal,
  }) => medicineControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof medicineControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MedicineControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof medicineControllerFindOne>>
>;
export type MedicineControllerFindOneQueryError = unknown;

export function useMedicineControllerFindOne<
  TData = Awaited<ReturnType<typeof medicineControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof medicineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof medicineControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useMedicineControllerFindOne<
  TData = Awaited<ReturnType<typeof medicineControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof medicineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof medicineControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useMedicineControllerFindOne<
  TData = Awaited<ReturnType<typeof medicineControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useMedicineControllerFindOne<
  TData = Awaited<ReturnType<typeof medicineControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof medicineControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getMedicineControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const medicineControllerUpdate = (id: string, updateMedicineDto: UpdateMedicineDto) => {
  return apiInstance<UpdateMedicineDto>({
    url: `/api/medicines/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateMedicineDto,
  });
};

export const getMedicineControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof medicineControllerUpdate>>,
    TError,
    { id: string; data: UpdateMedicineDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof medicineControllerUpdate>>,
  TError,
  { id: string; data: UpdateMedicineDto },
  TContext
> => {
  const mutationKey = ['medicineControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof medicineControllerUpdate>>,
    { id: string; data: UpdateMedicineDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return medicineControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type MedicineControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof medicineControllerUpdate>>
>;
export type MedicineControllerUpdateMutationBody = UpdateMedicineDto;
export type MedicineControllerUpdateMutationError = unknown;

export const useMedicineControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof medicineControllerUpdate>>,
      TError,
      { id: string; data: UpdateMedicineDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof medicineControllerUpdate>>,
  TError,
  { id: string; data: UpdateMedicineDto },
  TContext
> => {
  const mutationOptions = getMedicineControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const medicineControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/medicines/${id}`, method: 'DELETE' });
};

export const getMedicineControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof medicineControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof medicineControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['medicineControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof medicineControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return medicineControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type MedicineControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof medicineControllerRemove>>
>;

export type MedicineControllerRemoveMutationError = unknown;

export const useMedicineControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof medicineControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof medicineControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getMedicineControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
