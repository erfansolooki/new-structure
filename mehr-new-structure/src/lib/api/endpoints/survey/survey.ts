/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  RateDoctorDto,
  RatePatientDto,
  SurveyControllerGetMostCommonProsConsParams,
  SurveyEntity,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const surveyControllerRatePatient = (
  ratePatientDto: RatePatientDto,
  signal?: AbortSignal
) => {
  return apiInstance<SurveyEntity>({
    url: `/api/surveys/rate-patient`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: ratePatientDto,
    signal,
  });
};

export const getSurveyControllerRatePatientMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof surveyControllerRatePatient>>,
    TError,
    { data: RatePatientDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof surveyControllerRatePatient>>,
  TError,
  { data: RatePatientDto },
  TContext
> => {
  const mutationKey = ['surveyControllerRatePatient'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof surveyControllerRatePatient>>,
    { data: RatePatientDto }
  > = (props) => {
    const { data } = props ?? {};

    return surveyControllerRatePatient(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SurveyControllerRatePatientMutationResult = NonNullable<
  Awaited<ReturnType<typeof surveyControllerRatePatient>>
>;
export type SurveyControllerRatePatientMutationBody = RatePatientDto;
export type SurveyControllerRatePatientMutationError = unknown;

export const useSurveyControllerRatePatient = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof surveyControllerRatePatient>>,
      TError,
      { data: RatePatientDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof surveyControllerRatePatient>>,
  TError,
  { data: RatePatientDto },
  TContext
> => {
  const mutationOptions = getSurveyControllerRatePatientMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const surveyControllerRateDoctor = (rateDoctorDto: RateDoctorDto, signal?: AbortSignal) => {
  return apiInstance<SurveyEntity>({
    url: `/api/surveys/rate-doctor`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: rateDoctorDto,
    signal,
  });
};

export const getSurveyControllerRateDoctorMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof surveyControllerRateDoctor>>,
    TError,
    { data: RateDoctorDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof surveyControllerRateDoctor>>,
  TError,
  { data: RateDoctorDto },
  TContext
> => {
  const mutationKey = ['surveyControllerRateDoctor'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof surveyControllerRateDoctor>>,
    { data: RateDoctorDto }
  > = (props) => {
    const { data } = props ?? {};

    return surveyControllerRateDoctor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SurveyControllerRateDoctorMutationResult = NonNullable<
  Awaited<ReturnType<typeof surveyControllerRateDoctor>>
>;
export type SurveyControllerRateDoctorMutationBody = RateDoctorDto;
export type SurveyControllerRateDoctorMutationError = unknown;

export const useSurveyControllerRateDoctor = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof surveyControllerRateDoctor>>,
      TError,
      { data: RateDoctorDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof surveyControllerRateDoctor>>,
  TError,
  { data: RateDoctorDto },
  TContext
> => {
  const mutationOptions = getSurveyControllerRateDoctorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const surveyControllerGetMostCommonProsCons = (
  params: SurveyControllerGetMostCommonProsConsParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/surveys/most-common-pros-cons`,
    method: 'GET',
    params,
    signal,
  });
};

export const getSurveyControllerGetMostCommonProsConsQueryKey = (
  params?: SurveyControllerGetMostCommonProsConsParams
) => {
  return [`/api/surveys/most-common-pros-cons`, ...(params ? [params] : [])] as const;
};

export const getSurveyControllerGetMostCommonProsConsQueryOptions = <
  TData = Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
  TError = unknown,
>(
  params: SurveyControllerGetMostCommonProsConsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSurveyControllerGetMostCommonProsConsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>
  > = ({ signal }) => surveyControllerGetMostCommonProsCons(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SurveyControllerGetMostCommonProsConsQueryResult = NonNullable<
  Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>
>;
export type SurveyControllerGetMostCommonProsConsQueryError = unknown;

export function useSurveyControllerGetMostCommonProsCons<
  TData = Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
  TError = unknown,
>(
  params: SurveyControllerGetMostCommonProsConsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
          TError,
          Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSurveyControllerGetMostCommonProsCons<
  TData = Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
  TError = unknown,
>(
  params: SurveyControllerGetMostCommonProsConsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
          TError,
          Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSurveyControllerGetMostCommonProsCons<
  TData = Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
  TError = unknown,
>(
  params: SurveyControllerGetMostCommonProsConsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSurveyControllerGetMostCommonProsCons<
  TData = Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
  TError = unknown,
>(
  params: SurveyControllerGetMostCommonProsConsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof surveyControllerGetMostCommonProsCons>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSurveyControllerGetMostCommonProsConsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
