/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreatePaymentGuaranteeDto,
  PaginatedPaymentGuaranteeResponse,
  PaymentGuarantee,
  PaymentGuaranteeControllerFindAllParams,
  UpdatePaymentGuaranteeDto,
  UpdatePaymentGuaranteeStatusDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const paymentGuaranteeControllerCreate = (
  createPaymentGuaranteeDto: CreatePaymentGuaranteeDto,
  signal?: AbortSignal
) => {
  return apiInstance<PaymentGuarantee>({
    url: `/api/payment-guarantee`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPaymentGuaranteeDto,
    signal,
  });
};

export const getPaymentGuaranteeControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerCreate>>,
    TError,
    { data: CreatePaymentGuaranteeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof paymentGuaranteeControllerCreate>>,
  TError,
  { data: CreatePaymentGuaranteeDto },
  TContext
> => {
  const mutationKey = ['paymentGuaranteeControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentGuaranteeControllerCreate>>,
    { data: CreatePaymentGuaranteeDto }
  > = (props) => {
    const { data } = props ?? {};

    return paymentGuaranteeControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PaymentGuaranteeControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerCreate>>
>;
export type PaymentGuaranteeControllerCreateMutationBody = CreatePaymentGuaranteeDto;
export type PaymentGuaranteeControllerCreateMutationError = unknown;

export const usePaymentGuaranteeControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof paymentGuaranteeControllerCreate>>,
      TError,
      { data: CreatePaymentGuaranteeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof paymentGuaranteeControllerCreate>>,
  TError,
  { data: CreatePaymentGuaranteeDto },
  TContext
> => {
  const mutationOptions = getPaymentGuaranteeControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const paymentGuaranteeControllerFindAll = (
  params?: PaymentGuaranteeControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedPaymentGuaranteeResponse>({
    url: `/api/payment-guarantee`,
    method: 'GET',
    params,
    signal,
  });
};

export const getPaymentGuaranteeControllerFindAllQueryKey = (
  params?: PaymentGuaranteeControllerFindAllParams
) => {
  return [`/api/payment-guarantee`, ...(params ? [params] : [])] as const;
};

export const getPaymentGuaranteeControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
  TError = unknown,
>(
  params?: PaymentGuaranteeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaymentGuaranteeControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>> = ({
    signal,
  }) => paymentGuaranteeControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaymentGuaranteeControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>
>;
export type PaymentGuaranteeControllerFindAllQueryError = unknown;

export function usePaymentGuaranteeControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | PaymentGuaranteeControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaymentGuaranteeControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
  TError = unknown,
>(
  params?: PaymentGuaranteeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaymentGuaranteeControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
  TError = unknown,
>(
  params?: PaymentGuaranteeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaymentGuaranteeControllerFindAll<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>,
  TError = unknown,
>(
  params?: PaymentGuaranteeControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaymentGuaranteeControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentGuaranteeControllerFindMine = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api/payment-guarantee/mine`, method: 'GET', signal });
};

export const getPaymentGuaranteeControllerFindMineQueryKey = () => {
  return [`/api/payment-guarantee/mine`] as const;
};

export const getPaymentGuaranteeControllerFindMineQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaymentGuaranteeControllerFindMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>> = ({
    signal,
  }) => paymentGuaranteeControllerFindMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaymentGuaranteeControllerFindMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>
>;
export type PaymentGuaranteeControllerFindMineQueryError = unknown;

export function usePaymentGuaranteeControllerFindMine<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaymentGuaranteeControllerFindMine<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaymentGuaranteeControllerFindMine<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaymentGuaranteeControllerFindMine<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaymentGuaranteeControllerFindMineQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentGuaranteeControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<PaymentGuarantee>({
    url: `/api/payment-guarantee/${id}`,
    method: 'GET',
    signal,
  });
};

export const getPaymentGuaranteeControllerFindOneQueryKey = (id?: string) => {
  return [`/api/payment-guarantee/${id}`] as const;
};

export const getPaymentGuaranteeControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaymentGuaranteeControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>> = ({
    signal,
  }) => paymentGuaranteeControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaymentGuaranteeControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>
>;
export type PaymentGuaranteeControllerFindOneQueryError = unknown;

export function usePaymentGuaranteeControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaymentGuaranteeControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaymentGuaranteeControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaymentGuaranteeControllerFindOne<
  TData = Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paymentGuaranteeControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaymentGuaranteeControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paymentGuaranteeControllerUpdate = (
  id: string,
  updatePaymentGuaranteeDto: UpdatePaymentGuaranteeDto
) => {
  return apiInstance<void>({
    url: `/api/payment-guarantee/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updatePaymentGuaranteeDto,
  });
};

export const getPaymentGuaranteeControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerUpdate>>,
    TError,
    { id: string; data: UpdatePaymentGuaranteeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof paymentGuaranteeControllerUpdate>>,
  TError,
  { id: string; data: UpdatePaymentGuaranteeDto },
  TContext
> => {
  const mutationKey = ['paymentGuaranteeControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentGuaranteeControllerUpdate>>,
    { id: string; data: UpdatePaymentGuaranteeDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return paymentGuaranteeControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PaymentGuaranteeControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerUpdate>>
>;
export type PaymentGuaranteeControllerUpdateMutationBody = UpdatePaymentGuaranteeDto;
export type PaymentGuaranteeControllerUpdateMutationError = unknown;

export const usePaymentGuaranteeControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof paymentGuaranteeControllerUpdate>>,
      TError,
      { id: string; data: UpdatePaymentGuaranteeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof paymentGuaranteeControllerUpdate>>,
  TError,
  { id: string; data: UpdatePaymentGuaranteeDto },
  TContext
> => {
  const mutationOptions = getPaymentGuaranteeControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const paymentGuaranteeControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/payment-guarantee/${id}`, method: 'DELETE' });
};

export const getPaymentGuaranteeControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof paymentGuaranteeControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['paymentGuaranteeControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentGuaranteeControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return paymentGuaranteeControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PaymentGuaranteeControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerRemove>>
>;

export type PaymentGuaranteeControllerRemoveMutationError = unknown;

export const usePaymentGuaranteeControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof paymentGuaranteeControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof paymentGuaranteeControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPaymentGuaranteeControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const paymentGuaranteeControllerUpdateStatus = (
  id: string,
  updatePaymentGuaranteeStatusDto: UpdatePaymentGuaranteeStatusDto
) => {
  return apiInstance<void>({
    url: `/api/payment-guarantee/${id}/status`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updatePaymentGuaranteeStatusDto,
  });
};

export const getPaymentGuaranteeControllerUpdateStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof paymentGuaranteeControllerUpdateStatus>>,
    TError,
    { id: string; data: UpdatePaymentGuaranteeStatusDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof paymentGuaranteeControllerUpdateStatus>>,
  TError,
  { id: string; data: UpdatePaymentGuaranteeStatusDto },
  TContext
> => {
  const mutationKey = ['paymentGuaranteeControllerUpdateStatus'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof paymentGuaranteeControllerUpdateStatus>>,
    { id: string; data: UpdatePaymentGuaranteeStatusDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return paymentGuaranteeControllerUpdateStatus(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PaymentGuaranteeControllerUpdateStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof paymentGuaranteeControllerUpdateStatus>>
>;
export type PaymentGuaranteeControllerUpdateStatusMutationBody = UpdatePaymentGuaranteeStatusDto;
export type PaymentGuaranteeControllerUpdateStatusMutationError = unknown;

export const usePaymentGuaranteeControllerUpdateStatus = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof paymentGuaranteeControllerUpdateStatus>>,
      TError,
      { id: string; data: UpdatePaymentGuaranteeStatusDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof paymentGuaranteeControllerUpdateStatus>>,
  TError,
  { id: string; data: UpdatePaymentGuaranteeStatusDto },
  TContext
> => {
  const mutationOptions = getPaymentGuaranteeControllerUpdateStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
