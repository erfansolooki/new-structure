/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateReminderDto,
  ReminderControllerUpdate200,
  ReminderEntity,
  UpdateReminderDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const reminderControllerCreate = (
  createReminderDto: CreateReminderDto,
  signal?: AbortSignal
) => {
  return apiInstance<ReminderEntity>({
    url: `/api/reminders`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createReminderDto,
    signal,
  });
};

export const getReminderControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reminderControllerCreate>>,
    TError,
    { data: CreateReminderDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reminderControllerCreate>>,
  TError,
  { data: CreateReminderDto },
  TContext
> => {
  const mutationKey = ['reminderControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reminderControllerCreate>>,
    { data: CreateReminderDto }
  > = (props) => {
    const { data } = props ?? {};

    return reminderControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReminderControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof reminderControllerCreate>>
>;
export type ReminderControllerCreateMutationBody = CreateReminderDto;
export type ReminderControllerCreateMutationError = unknown;

export const useReminderControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reminderControllerCreate>>,
      TError,
      { data: CreateReminderDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reminderControllerCreate>>,
  TError,
  { data: CreateReminderDto },
  TContext
> => {
  const mutationOptions = getReminderControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const reminderControllerFindAll = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api/reminders`, method: 'GET', signal });
};

export const getReminderControllerFindAllQueryKey = () => {
  return [`/api/reminders`] as const;
};

export const getReminderControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof reminderControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindAll>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReminderControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof reminderControllerFindAll>>> = ({
    signal,
  }) => reminderControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reminderControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReminderControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof reminderControllerFindAll>>
>;
export type ReminderControllerFindAllQueryError = unknown;

export function useReminderControllerFindAll<
  TData = Awaited<ReturnType<typeof reminderControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reminderControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof reminderControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReminderControllerFindAll<
  TData = Awaited<ReturnType<typeof reminderControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reminderControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof reminderControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReminderControllerFindAll<
  TData = Awaited<ReturnType<typeof reminderControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useReminderControllerFindAll<
  TData = Awaited<ReturnType<typeof reminderControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReminderControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const reminderControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<ReminderEntity>({ url: `/api/reminders/${id}`, method: 'GET', signal });
};

export const getReminderControllerFindOneQueryKey = (id?: string) => {
  return [`/api/reminders/${id}`] as const;
};

export const getReminderControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof reminderControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReminderControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof reminderControllerFindOne>>> = ({
    signal,
  }) => reminderControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reminderControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReminderControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof reminderControllerFindOne>>
>;
export type ReminderControllerFindOneQueryError = unknown;

export function useReminderControllerFindOne<
  TData = Awaited<ReturnType<typeof reminderControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reminderControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof reminderControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReminderControllerFindOne<
  TData = Awaited<ReturnType<typeof reminderControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reminderControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof reminderControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReminderControllerFindOne<
  TData = Awaited<ReturnType<typeof reminderControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useReminderControllerFindOne<
  TData = Awaited<ReturnType<typeof reminderControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof reminderControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReminderControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const reminderControllerUpdate = (id: string, updateReminderDto: UpdateReminderDto) => {
  return apiInstance<ReminderControllerUpdate200>({
    url: `/api/reminders/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateReminderDto,
  });
};

export const getReminderControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reminderControllerUpdate>>,
    TError,
    { id: string; data: UpdateReminderDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reminderControllerUpdate>>,
  TError,
  { id: string; data: UpdateReminderDto },
  TContext
> => {
  const mutationKey = ['reminderControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reminderControllerUpdate>>,
    { id: string; data: UpdateReminderDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return reminderControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReminderControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof reminderControllerUpdate>>
>;
export type ReminderControllerUpdateMutationBody = UpdateReminderDto;
export type ReminderControllerUpdateMutationError = unknown;

export const useReminderControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reminderControllerUpdate>>,
      TError,
      { id: string; data: UpdateReminderDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reminderControllerUpdate>>,
  TError,
  { id: string; data: UpdateReminderDto },
  TContext
> => {
  const mutationOptions = getReminderControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const reminderControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/reminders/${id}`, method: 'DELETE' });
};

export const getReminderControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reminderControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reminderControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['reminderControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reminderControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return reminderControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReminderControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof reminderControllerRemove>>
>;

export type ReminderControllerRemoveMutationError = unknown;

export const useReminderControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reminderControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reminderControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getReminderControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
