/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  BillPayableContorllerFindAllParams,
  CreateBillPayableDto,
  UpdateBillPayableDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const billPayableContorllerCreate = (
  createBillPayableDto: CreateBillPayableDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/bills-payable`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createBillPayableDto,
    signal,
  });
};

export const getBillPayableContorllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof billPayableContorllerCreate>>,
    TError,
    { data: CreateBillPayableDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof billPayableContorllerCreate>>,
  TError,
  { data: CreateBillPayableDto },
  TContext
> => {
  const mutationKey = ['billPayableContorllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof billPayableContorllerCreate>>,
    { data: CreateBillPayableDto }
  > = (props) => {
    const { data } = props ?? {};

    return billPayableContorllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BillPayableContorllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof billPayableContorllerCreate>>
>;
export type BillPayableContorllerCreateMutationBody = CreateBillPayableDto;
export type BillPayableContorllerCreateMutationError = unknown;

export const useBillPayableContorllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof billPayableContorllerCreate>>,
      TError,
      { data: CreateBillPayableDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof billPayableContorllerCreate>>,
  TError,
  { data: CreateBillPayableDto },
  TContext
> => {
  const mutationOptions = getBillPayableContorllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const billPayableContorllerFindAll = (
  params?: BillPayableContorllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/bills-payable`, method: 'GET', params, signal });
};

export const getBillPayableContorllerFindAllQueryKey = (
  params?: BillPayableContorllerFindAllParams
) => {
  return [`/api/bills-payable`, ...(params ? [params] : [])] as const;
};

export const getBillPayableContorllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
  TError = unknown,
>(
  params?: BillPayableContorllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBillPayableContorllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof billPayableContorllerFindAll>>> = ({
    signal,
  }) => billPayableContorllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BillPayableContorllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof billPayableContorllerFindAll>>
>;
export type BillPayableContorllerFindAllQueryError = unknown;

export function useBillPayableContorllerFindAll<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
  TError = unknown,
>(
  params: undefined | BillPayableContorllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof billPayableContorllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useBillPayableContorllerFindAll<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
  TError = unknown,
>(
  params?: BillPayableContorllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof billPayableContorllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useBillPayableContorllerFindAll<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
  TError = unknown,
>(
  params?: BillPayableContorllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useBillPayableContorllerFindAll<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindAll>>,
  TError = unknown,
>(
  params?: BillPayableContorllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getBillPayableContorllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const billPayableContorllerFindOne = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api/bills-payable/id`, method: 'GET', signal });
};

export const getBillPayableContorllerFindOneQueryKey = () => {
  return [`/api/bills-payable/id`] as const;
};

export const getBillPayableContorllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindOne>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBillPayableContorllerFindOneQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof billPayableContorllerFindOne>>> = ({
    signal,
  }) => billPayableContorllerFindOne(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BillPayableContorllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof billPayableContorllerFindOne>>
>;
export type BillPayableContorllerFindOneQueryError = unknown;

export function useBillPayableContorllerFindOne<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof billPayableContorllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useBillPayableContorllerFindOne<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof billPayableContorllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useBillPayableContorllerFindOne<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useBillPayableContorllerFindOne<
  TData = Awaited<ReturnType<typeof billPayableContorllerFindOne>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof billPayableContorllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getBillPayableContorllerFindOneQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const billPayableContorllerUpdate = (
  id: string,
  updateBillPayableDto: UpdateBillPayableDto
) => {
  return apiInstance<void>({
    url: `/api/bills-payable/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateBillPayableDto,
  });
};

export const getBillPayableContorllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof billPayableContorllerUpdate>>,
    TError,
    { id: string; data: UpdateBillPayableDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof billPayableContorllerUpdate>>,
  TError,
  { id: string; data: UpdateBillPayableDto },
  TContext
> => {
  const mutationKey = ['billPayableContorllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof billPayableContorllerUpdate>>,
    { id: string; data: UpdateBillPayableDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return billPayableContorllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BillPayableContorllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof billPayableContorllerUpdate>>
>;
export type BillPayableContorllerUpdateMutationBody = UpdateBillPayableDto;
export type BillPayableContorllerUpdateMutationError = unknown;

export const useBillPayableContorllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof billPayableContorllerUpdate>>,
      TError,
      { id: string; data: UpdateBillPayableDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof billPayableContorllerUpdate>>,
  TError,
  { id: string; data: UpdateBillPayableDto },
  TContext
> => {
  const mutationOptions = getBillPayableContorllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
