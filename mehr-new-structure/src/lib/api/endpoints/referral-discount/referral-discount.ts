/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateReferralDiscountDto,
  PaginatedReferralDiscountResponse,
  ReferralDiscount,
  ReferralDiscountControllerFindAllParams,
  UpdateReferralDiscountDto,
  UpdateReferralDiscountStatusDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const referralDiscountControllerCreate = (
  createReferralDiscountDto: CreateReferralDiscountDto,
  signal?: AbortSignal
) => {
  return apiInstance<ReferralDiscount>({
    url: `/api/referral-discount`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createReferralDiscountDto,
    signal,
  });
};

export const getReferralDiscountControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referralDiscountControllerCreate>>,
    TError,
    { data: CreateReferralDiscountDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof referralDiscountControllerCreate>>,
  TError,
  { data: CreateReferralDiscountDto },
  TContext
> => {
  const mutationKey = ['referralDiscountControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof referralDiscountControllerCreate>>,
    { data: CreateReferralDiscountDto }
  > = (props) => {
    const { data } = props ?? {};

    return referralDiscountControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReferralDiscountControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof referralDiscountControllerCreate>>
>;
export type ReferralDiscountControllerCreateMutationBody = CreateReferralDiscountDto;
export type ReferralDiscountControllerCreateMutationError = unknown;

export const useReferralDiscountControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof referralDiscountControllerCreate>>,
      TError,
      { data: CreateReferralDiscountDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof referralDiscountControllerCreate>>,
  TError,
  { data: CreateReferralDiscountDto },
  TContext
> => {
  const mutationOptions = getReferralDiscountControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const referralDiscountControllerFindAll = (
  params?: ReferralDiscountControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedReferralDiscountResponse>({
    url: `/api/referral-discount`,
    method: 'GET',
    params,
    signal,
  });
};

export const getReferralDiscountControllerFindAllQueryKey = (
  params?: ReferralDiscountControllerFindAllParams
) => {
  return [`/api/referral-discount`, ...(params ? [params] : [])] as const;
};

export const getReferralDiscountControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
  TError = unknown,
>(
  params?: ReferralDiscountControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReferralDiscountControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof referralDiscountControllerFindAll>>> = ({
    signal,
  }) => referralDiscountControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReferralDiscountControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralDiscountControllerFindAll>>
>;
export type ReferralDiscountControllerFindAllQueryError = unknown;

export function useReferralDiscountControllerFindAll<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | ReferralDiscountControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof referralDiscountControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReferralDiscountControllerFindAll<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
  TError = unknown,
>(
  params?: ReferralDiscountControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof referralDiscountControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReferralDiscountControllerFindAll<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
  TError = unknown,
>(
  params?: ReferralDiscountControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useReferralDiscountControllerFindAll<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindAll>>,
  TError = unknown,
>(
  params?: ReferralDiscountControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReferralDiscountControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const referralDiscountControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<ReferralDiscount>({
    url: `/api/referral-discount/${id}`,
    method: 'GET',
    signal,
  });
};

export const getReferralDiscountControllerFindOneQueryKey = (id?: string) => {
  return [`/api/referral-discount/${id}`] as const;
};

export const getReferralDiscountControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReferralDiscountControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof referralDiscountControllerFindOne>>> = ({
    signal,
  }) => referralDiscountControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReferralDiscountControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralDiscountControllerFindOne>>
>;
export type ReferralDiscountControllerFindOneQueryError = unknown;

export function useReferralDiscountControllerFindOne<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof referralDiscountControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReferralDiscountControllerFindOne<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof referralDiscountControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReferralDiscountControllerFindOne<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useReferralDiscountControllerFindOne<
  TData = Awaited<ReturnType<typeof referralDiscountControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof referralDiscountControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReferralDiscountControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const referralDiscountControllerUpdate = (
  id: string,
  updateReferralDiscountDto: UpdateReferralDiscountDto
) => {
  return apiInstance<UpdateReferralDiscountDto>({
    url: `/api/referral-discount/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateReferralDiscountDto,
  });
};

export const getReferralDiscountControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referralDiscountControllerUpdate>>,
    TError,
    { id: string; data: UpdateReferralDiscountDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof referralDiscountControllerUpdate>>,
  TError,
  { id: string; data: UpdateReferralDiscountDto },
  TContext
> => {
  const mutationKey = ['referralDiscountControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof referralDiscountControllerUpdate>>,
    { id: string; data: UpdateReferralDiscountDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return referralDiscountControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReferralDiscountControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof referralDiscountControllerUpdate>>
>;
export type ReferralDiscountControllerUpdateMutationBody = UpdateReferralDiscountDto;
export type ReferralDiscountControllerUpdateMutationError = unknown;

export const useReferralDiscountControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof referralDiscountControllerUpdate>>,
      TError,
      { id: string; data: UpdateReferralDiscountDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof referralDiscountControllerUpdate>>,
  TError,
  { id: string; data: UpdateReferralDiscountDto },
  TContext
> => {
  const mutationOptions = getReferralDiscountControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const referralDiscountControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/referral-discount/${id}`, method: 'DELETE' });
};

export const getReferralDiscountControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referralDiscountControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof referralDiscountControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['referralDiscountControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof referralDiscountControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return referralDiscountControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReferralDiscountControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof referralDiscountControllerRemove>>
>;

export type ReferralDiscountControllerRemoveMutationError = unknown;

export const useReferralDiscountControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof referralDiscountControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof referralDiscountControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getReferralDiscountControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const referralDiscountControllerUpdateStatus = (
  id: string,
  updateReferralDiscountStatusDto: UpdateReferralDiscountStatusDto
) => {
  return apiInstance<void>({
    url: `/api/referral-discount/${id}/status`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateReferralDiscountStatusDto,
  });
};

export const getReferralDiscountControllerUpdateStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referralDiscountControllerUpdateStatus>>,
    TError,
    { id: string; data: UpdateReferralDiscountStatusDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof referralDiscountControllerUpdateStatus>>,
  TError,
  { id: string; data: UpdateReferralDiscountStatusDto },
  TContext
> => {
  const mutationKey = ['referralDiscountControllerUpdateStatus'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof referralDiscountControllerUpdateStatus>>,
    { id: string; data: UpdateReferralDiscountStatusDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return referralDiscountControllerUpdateStatus(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReferralDiscountControllerUpdateStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof referralDiscountControllerUpdateStatus>>
>;
export type ReferralDiscountControllerUpdateStatusMutationBody = UpdateReferralDiscountStatusDto;
export type ReferralDiscountControllerUpdateStatusMutationError = unknown;

export const useReferralDiscountControllerUpdateStatus = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof referralDiscountControllerUpdateStatus>>,
      TError,
      { id: string; data: UpdateReferralDiscountStatusDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof referralDiscountControllerUpdateStatus>>,
  TError,
  { id: string; data: UpdateReferralDiscountStatusDto },
  TContext
> => {
  const mutationOptions = getReferralDiscountControllerUpdateStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
