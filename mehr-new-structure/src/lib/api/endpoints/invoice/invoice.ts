/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AddTreatmentPlanDto,
  AttachPaymentGuaranteeDto,
  AttachRefferalDiscount,
  CreateInvoiceDto,
  DeleteTreatmentPlanDto,
  Invoice,
  InvoiceControllerAddTreatmentPlan200,
  InvoiceControllerDeleteTreatmentPlan200,
  InvoiceControllerFindAllParams,
  InvoiceControllerRecalculate200,
  InvoicePaginatedResopnse,
  UpdateInvoiceDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const invoiceControllerCreate = (
  createInvoiceDto: CreateInvoiceDto,
  signal?: AbortSignal
) => {
  return apiInstance<Invoice>({
    url: `/api/invoices`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createInvoiceDto,
    signal,
  });
};

export const getInvoiceControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerCreate>>,
    TError,
    { data: CreateInvoiceDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerCreate>>,
  TError,
  { data: CreateInvoiceDto },
  TContext
> => {
  const mutationKey = ['invoiceControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerCreate>>,
    { data: CreateInvoiceDto }
  > = (props) => {
    const { data } = props ?? {};

    return invoiceControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerCreate>>
>;
export type InvoiceControllerCreateMutationBody = CreateInvoiceDto;
export type InvoiceControllerCreateMutationError = unknown;

export const useInvoiceControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerCreate>>,
      TError,
      { data: CreateInvoiceDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerCreate>>,
  TError,
  { data: CreateInvoiceDto },
  TContext
> => {
  const mutationOptions = getInvoiceControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const invoiceControllerFindAll = (
  params?: InvoiceControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/invoices`, method: 'GET', params, signal });
};

export const getInvoiceControllerFindAllQueryKey = (params?: InvoiceControllerFindAllParams) => {
  return [`/api/invoices`, ...(params ? [params] : [])] as const;
};

export const getInvoiceControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof invoiceControllerFindAll>>,
  TError = InvoicePaginatedResopnse,
>(
  params?: InvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInvoiceControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof invoiceControllerFindAll>>> = ({
    signal,
  }) => invoiceControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof invoiceControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type InvoiceControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerFindAll>>
>;
export type InvoiceControllerFindAllQueryError = InvoicePaginatedResopnse;

export function useInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof invoiceControllerFindAll>>,
  TError = InvoicePaginatedResopnse,
>(
  params: undefined | InvoiceControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoiceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof invoiceControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof invoiceControllerFindAll>>,
  TError = InvoicePaginatedResopnse,
>(
  params?: InvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoiceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof invoiceControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof invoiceControllerFindAll>>,
  TError = InvoicePaginatedResopnse,
>(
  params?: InvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useInvoiceControllerFindAll<
  TData = Awaited<ReturnType<typeof invoiceControllerFindAll>>,
  TError = InvoicePaginatedResopnse,
>(
  params?: InvoiceControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getInvoiceControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const invoiceControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Invoice>({ url: `/api/invoices/${id}`, method: 'GET', signal });
};

export const getInvoiceControllerFindOneQueryKey = (id?: string) => {
  return [`/api/invoices/${id}`] as const;
};

export const getInvoiceControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof invoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInvoiceControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof invoiceControllerFindOne>>> = ({
    signal,
  }) => invoiceControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof invoiceControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type InvoiceControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerFindOne>>
>;
export type InvoiceControllerFindOneQueryError = unknown;

export function useInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof invoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoiceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof invoiceControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof invoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoiceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof invoiceControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof invoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useInvoiceControllerFindOne<
  TData = Awaited<ReturnType<typeof invoiceControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof invoiceControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getInvoiceControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const invoiceControllerUpdate = (id: string, updateInvoiceDto: UpdateInvoiceDto) => {
  return apiInstance<Invoice>({
    url: `/api/invoices/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateInvoiceDto,
  });
};

export const getInvoiceControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerUpdate>>,
    TError,
    { id: string; data: UpdateInvoiceDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerUpdate>>,
  TError,
  { id: string; data: UpdateInvoiceDto },
  TContext
> => {
  const mutationKey = ['invoiceControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerUpdate>>,
    { id: string; data: UpdateInvoiceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return invoiceControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerUpdate>>
>;
export type InvoiceControllerUpdateMutationBody = UpdateInvoiceDto;
export type InvoiceControllerUpdateMutationError = unknown;

export const useInvoiceControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerUpdate>>,
      TError,
      { id: string; data: UpdateInvoiceDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerUpdate>>,
  TError,
  { id: string; data: UpdateInvoiceDto },
  TContext
> => {
  const mutationOptions = getInvoiceControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const invoiceControllerFindByTreatmentPlanId = (id: string, signal?: AbortSignal) => {
  return apiInstance<Invoice[]>({
    url: `/api/invoices/treatment-plan/${id}`,
    method: 'GET',
    signal,
  });
};

export const getInvoiceControllerFindByTreatmentPlanIdQueryKey = (id?: string) => {
  return [`/api/invoices/treatment-plan/${id}`] as const;
};

export const getInvoiceControllerFindByTreatmentPlanIdQueryOptions = <
  TData = Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInvoiceControllerFindByTreatmentPlanIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>
  > = ({ signal }) => invoiceControllerFindByTreatmentPlanId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type InvoiceControllerFindByTreatmentPlanIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>
>;
export type InvoiceControllerFindByTreatmentPlanIdQueryError = unknown;

export function useInvoiceControllerFindByTreatmentPlanId<
  TData = Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
          TError,
          Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useInvoiceControllerFindByTreatmentPlanId<
  TData = Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
          TError,
          Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useInvoiceControllerFindByTreatmentPlanId<
  TData = Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useInvoiceControllerFindByTreatmentPlanId<
  TData = Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof invoiceControllerFindByTreatmentPlanId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getInvoiceControllerFindByTreatmentPlanIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const invoiceControllerAttachReferralDiscount = (
  id: string,
  attachRefferalDiscount: AttachRefferalDiscount
) => {
  return apiInstance<string>({
    url: `/api/invoices/${id}/atach-referral-discount`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: attachRefferalDiscount,
  });
};

export const getInvoiceControllerAttachReferralDiscountMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerAttachReferralDiscount>>,
    TError,
    { id: string; data: AttachRefferalDiscount },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerAttachReferralDiscount>>,
  TError,
  { id: string; data: AttachRefferalDiscount },
  TContext
> => {
  const mutationKey = ['invoiceControllerAttachReferralDiscount'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerAttachReferralDiscount>>,
    { id: string; data: AttachRefferalDiscount }
  > = (props) => {
    const { id, data } = props ?? {};

    return invoiceControllerAttachReferralDiscount(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerAttachReferralDiscountMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerAttachReferralDiscount>>
>;
export type InvoiceControllerAttachReferralDiscountMutationBody = AttachRefferalDiscount;
export type InvoiceControllerAttachReferralDiscountMutationError = unknown;

export const useInvoiceControllerAttachReferralDiscount = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerAttachReferralDiscount>>,
      TError,
      { id: string; data: AttachRefferalDiscount },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerAttachReferralDiscount>>,
  TError,
  { id: string; data: AttachRefferalDiscount },
  TContext
> => {
  const mutationOptions = getInvoiceControllerAttachReferralDiscountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const invoiceControllerAtachPayemntGuarantee = (
  id: string,
  attachPaymentGuaranteeDto: AttachPaymentGuaranteeDto
) => {
  return apiInstance<Invoice>({
    url: `/api/invoices/${id}/atach-payment-guarantee`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: attachPaymentGuaranteeDto,
  });
};

export const getInvoiceControllerAtachPayemntGuaranteeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerAtachPayemntGuarantee>>,
    TError,
    { id: string; data: AttachPaymentGuaranteeDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerAtachPayemntGuarantee>>,
  TError,
  { id: string; data: AttachPaymentGuaranteeDto },
  TContext
> => {
  const mutationKey = ['invoiceControllerAtachPayemntGuarantee'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerAtachPayemntGuarantee>>,
    { id: string; data: AttachPaymentGuaranteeDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return invoiceControllerAtachPayemntGuarantee(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerAtachPayemntGuaranteeMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerAtachPayemntGuarantee>>
>;
export type InvoiceControllerAtachPayemntGuaranteeMutationBody = AttachPaymentGuaranteeDto;
export type InvoiceControllerAtachPayemntGuaranteeMutationError = unknown;

export const useInvoiceControllerAtachPayemntGuarantee = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerAtachPayemntGuarantee>>,
      TError,
      { id: string; data: AttachPaymentGuaranteeDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerAtachPayemntGuarantee>>,
  TError,
  { id: string; data: AttachPaymentGuaranteeDto },
  TContext
> => {
  const mutationOptions = getInvoiceControllerAtachPayemntGuaranteeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const invoiceControllerAddTreatmentPlan = (
  id: string,
  addTreatmentPlanDto: AddTreatmentPlanDto
) => {
  return apiInstance<InvoiceControllerAddTreatmentPlan200>({
    url: `/api/invoices/${id}/add-treatment-plan`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: addTreatmentPlanDto,
  });
};

export const getInvoiceControllerAddTreatmentPlanMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerAddTreatmentPlan>>,
    TError,
    { id: string; data: AddTreatmentPlanDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerAddTreatmentPlan>>,
  TError,
  { id: string; data: AddTreatmentPlanDto },
  TContext
> => {
  const mutationKey = ['invoiceControllerAddTreatmentPlan'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerAddTreatmentPlan>>,
    { id: string; data: AddTreatmentPlanDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return invoiceControllerAddTreatmentPlan(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerAddTreatmentPlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerAddTreatmentPlan>>
>;
export type InvoiceControllerAddTreatmentPlanMutationBody = AddTreatmentPlanDto;
export type InvoiceControllerAddTreatmentPlanMutationError = unknown;

export const useInvoiceControllerAddTreatmentPlan = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerAddTreatmentPlan>>,
      TError,
      { id: string; data: AddTreatmentPlanDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerAddTreatmentPlan>>,
  TError,
  { id: string; data: AddTreatmentPlanDto },
  TContext
> => {
  const mutationOptions = getInvoiceControllerAddTreatmentPlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const invoiceControllerDeleteTreatmentPlan = (
  id: string,
  deleteTreatmentPlanDto: DeleteTreatmentPlanDto
) => {
  return apiInstance<InvoiceControllerDeleteTreatmentPlan200>({
    url: `/api/invoices/${id}/delete-treatment-plan`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteTreatmentPlanDto,
  });
};

export const getInvoiceControllerDeleteTreatmentPlanMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerDeleteTreatmentPlan>>,
    TError,
    { id: string; data: DeleteTreatmentPlanDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerDeleteTreatmentPlan>>,
  TError,
  { id: string; data: DeleteTreatmentPlanDto },
  TContext
> => {
  const mutationKey = ['invoiceControllerDeleteTreatmentPlan'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerDeleteTreatmentPlan>>,
    { id: string; data: DeleteTreatmentPlanDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return invoiceControllerDeleteTreatmentPlan(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerDeleteTreatmentPlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerDeleteTreatmentPlan>>
>;
export type InvoiceControllerDeleteTreatmentPlanMutationBody = DeleteTreatmentPlanDto;
export type InvoiceControllerDeleteTreatmentPlanMutationError = unknown;

export const useInvoiceControllerDeleteTreatmentPlan = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerDeleteTreatmentPlan>>,
      TError,
      { id: string; data: DeleteTreatmentPlanDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerDeleteTreatmentPlan>>,
  TError,
  { id: string; data: DeleteTreatmentPlanDto },
  TContext
> => {
  const mutationOptions = getInvoiceControllerDeleteTreatmentPlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const invoiceControllerRecalculate = (id: string) => {
  return apiInstance<InvoiceControllerRecalculate200>({
    url: `/api/invoices/${id}/recalculate`,
    method: 'PUT',
  });
};

export const getInvoiceControllerRecalculateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invoiceControllerRecalculate>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof invoiceControllerRecalculate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['invoiceControllerRecalculate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invoiceControllerRecalculate>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return invoiceControllerRecalculate(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type InvoiceControllerRecalculateMutationResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerRecalculate>>
>;

export type InvoiceControllerRecalculateMutationError = unknown;

export const useInvoiceControllerRecalculate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof invoiceControllerRecalculate>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof invoiceControllerRecalculate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getInvoiceControllerRecalculateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
