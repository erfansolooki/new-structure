/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateTicketCategoryDto,
  PaginatedTicketCategoryResponseDto,
  TicketCategory,
  TicketCategoryControllerFindAllParams,
  TicketCategoryResponseDto,
  UpdateTicketCategoryDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const ticketCategoryControllerFindAll = (
  params?: TicketCategoryControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/ticket-categories`, method: 'GET', params, signal });
};

export const getTicketCategoryControllerFindAllQueryKey = (
  params?: TicketCategoryControllerFindAllParams
) => {
  return [`/api/ticket-categories`, ...(params ? [params] : [])] as const;
};

export const getTicketCategoryControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
  TError = PaginatedTicketCategoryResponseDto,
>(
  params?: TicketCategoryControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketCategoryControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>> = ({
    signal,
  }) => ticketCategoryControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TicketCategoryControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>
>;
export type TicketCategoryControllerFindAllQueryError = PaginatedTicketCategoryResponseDto;

export function useTicketCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
  TError = PaginatedTicketCategoryResponseDto,
>(
  params: undefined | TicketCategoryControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
  TError = PaginatedTicketCategoryResponseDto,
>(
  params?: TicketCategoryControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
  TError = PaginatedTicketCategoryResponseDto,
>(
  params?: TicketCategoryControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useTicketCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>,
  TError = PaginatedTicketCategoryResponseDto,
>(
  params?: TicketCategoryControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTicketCategoryControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ticketCategoryControllerCreate = (
  createTicketCategoryDto: CreateTicketCategoryDto,
  signal?: AbortSignal
) => {
  return apiInstance<TicketCategory>({
    url: `/api/ticket-categories`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createTicketCategoryDto,
    signal,
  });
};

export const getTicketCategoryControllerCreateMutationOptions = <
  TError = TicketCategoryResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketCategoryControllerCreate>>,
    TError,
    { data: CreateTicketCategoryDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketCategoryControllerCreate>>,
  TError,
  { data: CreateTicketCategoryDto },
  TContext
> => {
  const mutationKey = ['ticketCategoryControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketCategoryControllerCreate>>,
    { data: CreateTicketCategoryDto }
  > = (props) => {
    const { data } = props ?? {};

    return ticketCategoryControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketCategoryControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketCategoryControllerCreate>>
>;
export type TicketCategoryControllerCreateMutationBody = CreateTicketCategoryDto;
export type TicketCategoryControllerCreateMutationError = TicketCategoryResponseDto;

export const useTicketCategoryControllerCreate = <
  TError = TicketCategoryResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketCategoryControllerCreate>>,
      TError,
      { data: CreateTicketCategoryDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketCategoryControllerCreate>>,
  TError,
  { data: CreateTicketCategoryDto },
  TContext
> => {
  const mutationOptions = getTicketCategoryControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const ticketCategoryControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<TicketCategory>({
    url: `/api/ticket-categories/${id}`,
    method: 'GET',
    signal,
  });
};

export const getTicketCategoryControllerFindOneQueryKey = (id?: string) => {
  return [`/api/ticket-categories/${id}`] as const;
};

export const getTicketCategoryControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
  TError = TicketCategoryResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketCategoryControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>> = ({
    signal,
  }) => ticketCategoryControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TicketCategoryControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>
>;
export type TicketCategoryControllerFindOneQueryError = TicketCategoryResponseDto;

export function useTicketCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
  TError = TicketCategoryResponseDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
  TError = TicketCategoryResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTicketCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
  TError = TicketCategoryResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useTicketCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>,
  TError = TicketCategoryResponseDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticketCategoryControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTicketCategoryControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const ticketCategoryControllerUpdate = (
  id: string,
  updateTicketCategoryDto: UpdateTicketCategoryDto
) => {
  return apiInstance<TicketCategory>({
    url: `/api/ticket-categories/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateTicketCategoryDto,
  });
};

export const getTicketCategoryControllerUpdateMutationOptions = <
  TError = TicketCategoryResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketCategoryControllerUpdate>>,
    TError,
    { id: string; data: UpdateTicketCategoryDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketCategoryControllerUpdate>>,
  TError,
  { id: string; data: UpdateTicketCategoryDto },
  TContext
> => {
  const mutationKey = ['ticketCategoryControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketCategoryControllerUpdate>>,
    { id: string; data: UpdateTicketCategoryDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return ticketCategoryControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketCategoryControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketCategoryControllerUpdate>>
>;
export type TicketCategoryControllerUpdateMutationBody = UpdateTicketCategoryDto;
export type TicketCategoryControllerUpdateMutationError = TicketCategoryResponseDto;

export const useTicketCategoryControllerUpdate = <
  TError = TicketCategoryResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketCategoryControllerUpdate>>,
      TError,
      { id: string; data: UpdateTicketCategoryDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketCategoryControllerUpdate>>,
  TError,
  { id: string; data: UpdateTicketCategoryDto },
  TContext
> => {
  const mutationOptions = getTicketCategoryControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const ticketCategoryControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/ticket-categories/${id}`, method: 'DELETE' });
};

export const getTicketCategoryControllerRemoveMutationOptions = <
  TError = TicketCategoryResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ticketCategoryControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ticketCategoryControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['ticketCategoryControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ticketCategoryControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ticketCategoryControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type TicketCategoryControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof ticketCategoryControllerRemove>>
>;

export type TicketCategoryControllerRemoveMutationError = TicketCategoryResponseDto;

export const useTicketCategoryControllerRemove = <
  TError = TicketCategoryResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof ticketCategoryControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof ticketCategoryControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getTicketCategoryControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
