/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateRoleDto,
  GrantPermissionToRoleDto,
  GrantToUserDto,
  Permission,
  Role,
  UpdateRoleDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const roleControllerCreate = (createRoleDto: CreateRoleDto, signal?: AbortSignal) => {
  return apiInstance<Role>({
    url: `/api/roles`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createRoleDto,
    signal,
  });
};

export const getRoleControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerCreate>>,
    TError,
    { data: CreateRoleDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerCreate>>,
  TError,
  { data: CreateRoleDto },
  TContext
> => {
  const mutationKey = ['roleControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerCreate>>,
    { data: CreateRoleDto }
  > = (props) => {
    const { data } = props ?? {};

    return roleControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerCreate>>
>;
export type RoleControllerCreateMutationBody = CreateRoleDto;
export type RoleControllerCreateMutationError = unknown;

export const useRoleControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerCreate>>,
      TError,
      { data: CreateRoleDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerCreate>>,
  TError,
  { data: CreateRoleDto },
  TContext
> => {
  const mutationOptions = getRoleControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerFindAll = (signal?: AbortSignal) => {
  return apiInstance<Role[]>({ url: `/api/roles`, method: 'GET', signal });
};

export const getRoleControllerFindAllQueryKey = () => {
  return [`/api/roles`] as const;
};

export const getRoleControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof roleControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindAll>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRoleControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof roleControllerFindAll>>> = ({ signal }) =>
    roleControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof roleControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RoleControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerFindAll>>
>;
export type RoleControllerFindAllQueryError = unknown;

export function useRoleControllerFindAll<
  TData = Awaited<ReturnType<typeof roleControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof roleControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoleControllerFindAll<
  TData = Awaited<ReturnType<typeof roleControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof roleControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoleControllerFindAll<
  TData = Awaited<ReturnType<typeof roleControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useRoleControllerFindAll<
  TData = Awaited<ReturnType<typeof roleControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getRoleControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const roleControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Role>({ url: `/api/roles/${id}`, method: 'GET', signal });
};

export const getRoleControllerFindOneQueryKey = (id?: string) => {
  return [`/api/roles/${id}`] as const;
};

export const getRoleControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof roleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRoleControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof roleControllerFindOne>>> = ({ signal }) =>
    roleControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof roleControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RoleControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerFindOne>>
>;
export type RoleControllerFindOneQueryError = unknown;

export function useRoleControllerFindOne<
  TData = Awaited<ReturnType<typeof roleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof roleControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoleControllerFindOne<
  TData = Awaited<ReturnType<typeof roleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof roleControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoleControllerFindOne<
  TData = Awaited<ReturnType<typeof roleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useRoleControllerFindOne<
  TData = Awaited<ReturnType<typeof roleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getRoleControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const roleControllerDelete = (id: string) => {
  return apiInstance<void>({ url: `/api/roles/${id}`, method: 'DELETE' });
};

export const getRoleControllerDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['roleControllerDelete'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return roleControllerDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerDelete>>
>;

export type RoleControllerDeleteMutationError = unknown;

export const useRoleControllerDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerDelete>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getRoleControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerUpdate = (id: string, updateRoleDto: UpdateRoleDto) => {
  return apiInstance<UpdateRoleDto>({
    url: `/api/roles/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateRoleDto,
  });
};

export const getRoleControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerUpdate>>,
    TError,
    { id: string; data: UpdateRoleDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerUpdate>>,
  TError,
  { id: string; data: UpdateRoleDto },
  TContext
> => {
  const mutationKey = ['roleControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerUpdate>>,
    { id: string; data: UpdateRoleDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return roleControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerUpdate>>
>;
export type RoleControllerUpdateMutationBody = UpdateRoleDto;
export type RoleControllerUpdateMutationError = unknown;

export const useRoleControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerUpdate>>,
      TError,
      { id: string; data: UpdateRoleDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerUpdate>>,
  TError,
  { id: string; data: UpdateRoleDto },
  TContext
> => {
  const mutationOptions = getRoleControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerGrantToUser = (grantToUserDto: GrantToUserDto, signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/roles/grant-to-user`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: grantToUserDto,
    signal,
  });
};

export const getRoleControllerGrantToUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerGrantToUser>>,
    TError,
    { data: GrantToUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerGrantToUser>>,
  TError,
  { data: GrantToUserDto },
  TContext
> => {
  const mutationKey = ['roleControllerGrantToUser'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerGrantToUser>>,
    { data: GrantToUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return roleControllerGrantToUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerGrantToUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerGrantToUser>>
>;
export type RoleControllerGrantToUserMutationBody = GrantToUserDto;
export type RoleControllerGrantToUserMutationError = unknown;

export const useRoleControllerGrantToUser = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerGrantToUser>>,
      TError,
      { data: GrantToUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerGrantToUser>>,
  TError,
  { data: GrantToUserDto },
  TContext
> => {
  const mutationOptions = getRoleControllerGrantToUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerDismissFromUser = (grantToUserDto: GrantToUserDto) => {
  return apiInstance<void>({
    url: `/api/roles/dismiss-from-user`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: grantToUserDto,
  });
};

export const getRoleControllerDismissFromUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerDismissFromUser>>,
    TError,
    { data: GrantToUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerDismissFromUser>>,
  TError,
  { data: GrantToUserDto },
  TContext
> => {
  const mutationKey = ['roleControllerDismissFromUser'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerDismissFromUser>>,
    { data: GrantToUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return roleControllerDismissFromUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerDismissFromUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerDismissFromUser>>
>;
export type RoleControllerDismissFromUserMutationBody = GrantToUserDto;
export type RoleControllerDismissFromUserMutationError = unknown;

export const useRoleControllerDismissFromUser = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerDismissFromUser>>,
      TError,
      { data: GrantToUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerDismissFromUser>>,
  TError,
  { data: GrantToUserDto },
  TContext
> => {
  const mutationOptions = getRoleControllerDismissFromUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerGrantPermissions = (
  grantPermissionToRoleDto: GrantPermissionToRoleDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/roles/grant-permissions`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: grantPermissionToRoleDto,
    signal,
  });
};

export const getRoleControllerGrantPermissionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerGrantPermissions>>,
    TError,
    { data: GrantPermissionToRoleDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerGrantPermissions>>,
  TError,
  { data: GrantPermissionToRoleDto },
  TContext
> => {
  const mutationKey = ['roleControllerGrantPermissions'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerGrantPermissions>>,
    { data: GrantPermissionToRoleDto }
  > = (props) => {
    const { data } = props ?? {};

    return roleControllerGrantPermissions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerGrantPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerGrantPermissions>>
>;
export type RoleControllerGrantPermissionsMutationBody = GrantPermissionToRoleDto;
export type RoleControllerGrantPermissionsMutationError = unknown;

export const useRoleControllerGrantPermissions = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerGrantPermissions>>,
      TError,
      { data: GrantPermissionToRoleDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerGrantPermissions>>,
  TError,
  { data: GrantPermissionToRoleDto },
  TContext
> => {
  const mutationOptions = getRoleControllerGrantPermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerDissmisPermissions = (
  grantPermissionToRoleDto: GrantPermissionToRoleDto
) => {
  return apiInstance<void>({
    url: `/api/roles/dissmis-permissions`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: grantPermissionToRoleDto,
  });
};

export const getRoleControllerDissmisPermissionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof roleControllerDissmisPermissions>>,
    TError,
    { data: GrantPermissionToRoleDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof roleControllerDissmisPermissions>>,
  TError,
  { data: GrantPermissionToRoleDto },
  TContext
> => {
  const mutationKey = ['roleControllerDissmisPermissions'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof roleControllerDissmisPermissions>>,
    { data: GrantPermissionToRoleDto }
  > = (props) => {
    const { data } = props ?? {};

    return roleControllerDissmisPermissions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RoleControllerDissmisPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerDissmisPermissions>>
>;
export type RoleControllerDissmisPermissionsMutationBody = GrantPermissionToRoleDto;
export type RoleControllerDissmisPermissionsMutationError = unknown;

export const useRoleControllerDissmisPermissions = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof roleControllerDissmisPermissions>>,
      TError,
      { data: GrantPermissionToRoleDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof roleControllerDissmisPermissions>>,
  TError,
  { data: GrantPermissionToRoleDto },
  TContext
> => {
  const mutationOptions = getRoleControllerDissmisPermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const roleControllerGetPermissions = (roleId: string, signal?: AbortSignal) => {
  return apiInstance<Permission[]>({
    url: `/api/roles/${roleId}/permissions`,
    method: 'GET',
    signal,
  });
};

export const getRoleControllerGetPermissionsQueryKey = (roleId?: string) => {
  return [`/api/roles/${roleId}/permissions`] as const;
};

export const getRoleControllerGetPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof roleControllerGetPermissions>>,
  TError = unknown,
>(
  roleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerGetPermissions>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRoleControllerGetPermissionsQueryKey(roleId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof roleControllerGetPermissions>>> = ({
    signal,
  }) => roleControllerGetPermissions(roleId, signal);

  return { queryKey, queryFn, enabled: !!roleId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof roleControllerGetPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RoleControllerGetPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof roleControllerGetPermissions>>
>;
export type RoleControllerGetPermissionsQueryError = unknown;

export function useRoleControllerGetPermissions<
  TData = Awaited<ReturnType<typeof roleControllerGetPermissions>>,
  TError = unknown,
>(
  roleId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerGetPermissions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleControllerGetPermissions>>,
          TError,
          Awaited<ReturnType<typeof roleControllerGetPermissions>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoleControllerGetPermissions<
  TData = Awaited<ReturnType<typeof roleControllerGetPermissions>>,
  TError = unknown,
>(
  roleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerGetPermissions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleControllerGetPermissions>>,
          TError,
          Awaited<ReturnType<typeof roleControllerGetPermissions>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRoleControllerGetPermissions<
  TData = Awaited<ReturnType<typeof roleControllerGetPermissions>>,
  TError = unknown,
>(
  roleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerGetPermissions>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useRoleControllerGetPermissions<
  TData = Awaited<ReturnType<typeof roleControllerGetPermissions>>,
  TError = unknown,
>(
  roleId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roleControllerGetPermissions>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getRoleControllerGetPermissionsQueryOptions(roleId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
