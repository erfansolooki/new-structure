/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const permissionCategoryControllerFindAll = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api/permission-categories`, method: 'GET', signal });
};

export const getPermissionCategoryControllerFindAllQueryKey = () => {
  return [`/api/permission-categories`] as const;
};

export const getPermissionCategoryControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPermissionCategoryControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>> = ({
    signal,
  }) => permissionCategoryControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PermissionCategoryControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>
>;
export type PermissionCategoryControllerFindAllQueryError = unknown;

export function usePermissionCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePermissionCategoryControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPermissionCategoryControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const permissionCategoryControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api/permission-categories/${id}`, method: 'GET', signal });
};

export const getPermissionCategoryControllerFindOneQueryKey = (id?: string) => {
  return [`/api/permission-categories/${id}`] as const;
};

export const getPermissionCategoryControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPermissionCategoryControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>> = ({
    signal,
  }) => permissionCategoryControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PermissionCategoryControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>
>;
export type PermissionCategoryControllerFindOneQueryError = unknown;

export function usePermissionCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePermissionCategoryControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionCategoryControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPermissionCategoryControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
