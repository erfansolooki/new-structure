/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateProsAndConsDto,
  PaginateProsAndConsResponseDto,
  ProsAndConsControllerFindAllParams,
  ProsAndConsEntity,
  UpdateProsAndConsDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const prosAndConsControllerCreate = (
  createProsAndConsDto: CreateProsAndConsDto,
  signal?: AbortSignal
) => {
  return apiInstance<ProsAndConsEntity>({
    url: `/api/pros-cons`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createProsAndConsDto,
    signal,
  });
};

export const getProsAndConsControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof prosAndConsControllerCreate>>,
    TError,
    { data: CreateProsAndConsDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof prosAndConsControllerCreate>>,
  TError,
  { data: CreateProsAndConsDto },
  TContext
> => {
  const mutationKey = ['prosAndConsControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof prosAndConsControllerCreate>>,
    { data: CreateProsAndConsDto }
  > = (props) => {
    const { data } = props ?? {};

    return prosAndConsControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProsAndConsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof prosAndConsControllerCreate>>
>;
export type ProsAndConsControllerCreateMutationBody = CreateProsAndConsDto;
export type ProsAndConsControllerCreateMutationError = unknown;

export const useProsAndConsControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof prosAndConsControllerCreate>>,
      TError,
      { data: CreateProsAndConsDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof prosAndConsControllerCreate>>,
  TError,
  { data: CreateProsAndConsDto },
  TContext
> => {
  const mutationOptions = getProsAndConsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const prosAndConsControllerFindAll = (
  params?: ProsAndConsControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginateProsAndConsResponseDto>({
    url: `/api/pros-cons`,
    method: 'GET',
    params,
    signal,
  });
};

export const getProsAndConsControllerFindAllQueryKey = (
  params?: ProsAndConsControllerFindAllParams
) => {
  return [`/api/pros-cons`, ...(params ? [params] : [])] as const;
};

export const getProsAndConsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
  TError = unknown,
>(
  params?: ProsAndConsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProsAndConsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof prosAndConsControllerFindAll>>> = ({
    signal,
  }) => prosAndConsControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProsAndConsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof prosAndConsControllerFindAll>>
>;
export type ProsAndConsControllerFindAllQueryError = unknown;

export function useProsAndConsControllerFindAll<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | ProsAndConsControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof prosAndConsControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useProsAndConsControllerFindAll<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
  TError = unknown,
>(
  params?: ProsAndConsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof prosAndConsControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useProsAndConsControllerFindAll<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
  TError = unknown,
>(
  params?: ProsAndConsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useProsAndConsControllerFindAll<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindAll>>,
  TError = unknown,
>(
  params?: ProsAndConsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getProsAndConsControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prosAndConsControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<ProsAndConsEntity>({ url: `/api/pros-cons/${id}`, method: 'GET', signal });
};

export const getProsAndConsControllerFindOneQueryKey = (id?: string) => {
  return [`/api/pros-cons/${id}`] as const;
};

export const getProsAndConsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProsAndConsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof prosAndConsControllerFindOne>>> = ({
    signal,
  }) => prosAndConsControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProsAndConsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof prosAndConsControllerFindOne>>
>;
export type ProsAndConsControllerFindOneQueryError = unknown;

export function useProsAndConsControllerFindOne<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof prosAndConsControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useProsAndConsControllerFindOne<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof prosAndConsControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useProsAndConsControllerFindOne<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useProsAndConsControllerFindOne<
  TData = Awaited<ReturnType<typeof prosAndConsControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prosAndConsControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getProsAndConsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prosAndConsControllerUpdate = (
  id: string,
  updateProsAndConsDto: UpdateProsAndConsDto
) => {
  return apiInstance<void>({
    url: `/api/pros-cons/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateProsAndConsDto,
  });
};

export const getProsAndConsControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof prosAndConsControllerUpdate>>,
    TError,
    { id: string; data: UpdateProsAndConsDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof prosAndConsControllerUpdate>>,
  TError,
  { id: string; data: UpdateProsAndConsDto },
  TContext
> => {
  const mutationKey = ['prosAndConsControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof prosAndConsControllerUpdate>>,
    { id: string; data: UpdateProsAndConsDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return prosAndConsControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProsAndConsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof prosAndConsControllerUpdate>>
>;
export type ProsAndConsControllerUpdateMutationBody = UpdateProsAndConsDto;
export type ProsAndConsControllerUpdateMutationError = unknown;

export const useProsAndConsControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof prosAndConsControllerUpdate>>,
      TError,
      { id: string; data: UpdateProsAndConsDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof prosAndConsControllerUpdate>>,
  TError,
  { id: string; data: UpdateProsAndConsDto },
  TContext
> => {
  const mutationOptions = getProsAndConsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const prosAndConsControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/pros-cons/${id}`, method: 'DELETE' });
};

export const getProsAndConsControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof prosAndConsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof prosAndConsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['prosAndConsControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof prosAndConsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return prosAndConsControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProsAndConsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof prosAndConsControllerRemove>>
>;

export type ProsAndConsControllerRemoveMutationError = unknown;

export const useProsAndConsControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof prosAndConsControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof prosAndConsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getProsAndConsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
