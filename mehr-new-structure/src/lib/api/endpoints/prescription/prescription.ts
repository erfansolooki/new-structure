/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreatePrescriptionDto,
  Prescription,
  PrescriptionControllerFindAllParams,
  PrescriptionControllerUpdate200,
  PrescriptionPaginatedResopnse,
  UpdatePrescriptionDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const prescriptionControllerCreate = (
  createPrescriptionDto: CreatePrescriptionDto,
  signal?: AbortSignal
) => {
  return apiInstance<Prescription>({
    url: `/api/prescriptions`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPrescriptionDto,
    signal,
  });
};

export const getPrescriptionControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof prescriptionControllerCreate>>,
    TError,
    { data: CreatePrescriptionDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof prescriptionControllerCreate>>,
  TError,
  { data: CreatePrescriptionDto },
  TContext
> => {
  const mutationKey = ['prescriptionControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof prescriptionControllerCreate>>,
    { data: CreatePrescriptionDto }
  > = (props) => {
    const { data } = props ?? {};

    return prescriptionControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PrescriptionControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof prescriptionControllerCreate>>
>;
export type PrescriptionControllerCreateMutationBody = CreatePrescriptionDto;
export type PrescriptionControllerCreateMutationError = unknown;

export const usePrescriptionControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof prescriptionControllerCreate>>,
      TError,
      { data: CreatePrescriptionDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof prescriptionControllerCreate>>,
  TError,
  { data: CreatePrescriptionDto },
  TContext
> => {
  const mutationOptions = getPrescriptionControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const prescriptionControllerFindAll = (
  params?: PrescriptionControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/prescriptions`, method: 'GET', params, signal });
};

export const getPrescriptionControllerFindAllQueryKey = (
  params?: PrescriptionControllerFindAllParams
) => {
  return [`/api/prescriptions`, ...(params ? [params] : [])] as const;
};

export const getPrescriptionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
  TError = PrescriptionPaginatedResopnse,
>(
  params?: PrescriptionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPrescriptionControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof prescriptionControllerFindAll>>> = ({
    signal,
  }) => prescriptionControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PrescriptionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof prescriptionControllerFindAll>>
>;
export type PrescriptionControllerFindAllQueryError = PrescriptionPaginatedResopnse;

export function usePrescriptionControllerFindAll<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
  TError = PrescriptionPaginatedResopnse,
>(
  params: undefined | PrescriptionControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof prescriptionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePrescriptionControllerFindAll<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
  TError = PrescriptionPaginatedResopnse,
>(
  params?: PrescriptionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof prescriptionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePrescriptionControllerFindAll<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
  TError = PrescriptionPaginatedResopnse,
>(
  params?: PrescriptionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePrescriptionControllerFindAll<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindAll>>,
  TError = PrescriptionPaginatedResopnse,
>(
  params?: PrescriptionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPrescriptionControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prescriptionControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Prescription>({ url: `/api/prescriptions/${id}`, method: 'GET', signal });
};

export const getPrescriptionControllerFindOneQueryKey = (id?: string) => {
  return [`/api/prescriptions/${id}`] as const;
};

export const getPrescriptionControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPrescriptionControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof prescriptionControllerFindOne>>> = ({
    signal,
  }) => prescriptionControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PrescriptionControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof prescriptionControllerFindOne>>
>;
export type PrescriptionControllerFindOneQueryError = unknown;

export function usePrescriptionControllerFindOne<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof prescriptionControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePrescriptionControllerFindOne<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof prescriptionControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePrescriptionControllerFindOne<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePrescriptionControllerFindOne<
  TData = Awaited<ReturnType<typeof prescriptionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof prescriptionControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPrescriptionControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prescriptionControllerUpdate = (
  id: string,
  updatePrescriptionDto: UpdatePrescriptionDto
) => {
  return apiInstance<PrescriptionControllerUpdate200>({
    url: `/api/prescriptions/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updatePrescriptionDto,
  });
};

export const getPrescriptionControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof prescriptionControllerUpdate>>,
    TError,
    { id: string; data: UpdatePrescriptionDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof prescriptionControllerUpdate>>,
  TError,
  { id: string; data: UpdatePrescriptionDto },
  TContext
> => {
  const mutationKey = ['prescriptionControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof prescriptionControllerUpdate>>,
    { id: string; data: UpdatePrescriptionDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return prescriptionControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PrescriptionControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof prescriptionControllerUpdate>>
>;
export type PrescriptionControllerUpdateMutationBody = UpdatePrescriptionDto;
export type PrescriptionControllerUpdateMutationError = unknown;

export const usePrescriptionControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof prescriptionControllerUpdate>>,
      TError,
      { id: string; data: UpdatePrescriptionDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof prescriptionControllerUpdate>>,
  TError,
  { id: string; data: UpdatePrescriptionDto },
  TContext
> => {
  const mutationOptions = getPrescriptionControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const prescriptionControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/prescriptions/${id}`, method: 'DELETE' });
};

export const getPrescriptionControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof prescriptionControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof prescriptionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['prescriptionControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof prescriptionControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return prescriptionControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PrescriptionControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof prescriptionControllerRemove>>
>;

export type PrescriptionControllerRemoveMutationError = unknown;

export const usePrescriptionControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof prescriptionControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof prescriptionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPrescriptionControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
