/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  PaginatedTransactionResponse,
  WalletTransactionControllerFindAllByAdminParams,
  WalletTransactionControllerFindAllParams,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const walletTransactionControllerFindAll = (
  params?: WalletTransactionControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedTransactionResponse>({
    url: `/api/wallet-transactions`,
    method: 'GET',
    params,
    signal,
  });
};

export const getWalletTransactionControllerFindAllQueryKey = (
  params?: WalletTransactionControllerFindAllParams
) => {
  return [`/api/wallet-transactions`, ...(params ? [params] : [])] as const;
};

export const getWalletTransactionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletTransactionControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWalletTransactionControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof walletTransactionControllerFindAll>>> = ({
    signal,
  }) => walletTransactionControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletTransactionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactionControllerFindAll>>
>;
export type WalletTransactionControllerFindAllQueryError = unknown;

export function useWalletTransactionControllerFindAll<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | WalletTransactionControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletTransactionControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletTransactionControllerFindAll<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletTransactionControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletTransactionControllerFindAll<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletTransactionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWalletTransactionControllerFindAll<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAll>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof walletTransactionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWalletTransactionControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const walletTransactionControllerFindAllByAdmin = (
  params?: WalletTransactionControllerFindAllByAdminParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedTransactionResponse>({
    url: `/api/wallet-transactions/admin`,
    method: 'GET',
    params,
    signal,
  });
};

export const getWalletTransactionControllerFindAllByAdminQueryKey = (
  params?: WalletTransactionControllerFindAllByAdminParams
) => {
  return [`/api/wallet-transactions/admin`, ...(params ? [params] : [])] as const;
};

export const getWalletTransactionControllerFindAllByAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWalletTransactionControllerFindAllByAdminQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>
  > = ({ signal }) => walletTransactionControllerFindAllByAdmin(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletTransactionControllerFindAllByAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>
>;
export type WalletTransactionControllerFindAllByAdminQueryError = unknown;

export function useWalletTransactionControllerFindAllByAdmin<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
  TError = unknown,
>(
  params: undefined | WalletTransactionControllerFindAllByAdminParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletTransactionControllerFindAllByAdmin<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWalletTransactionControllerFindAllByAdmin<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWalletTransactionControllerFindAllByAdmin<
  TData = Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
  TError = unknown,
>(
  params?: WalletTransactionControllerFindAllByAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletTransactionControllerFindAllByAdmin>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWalletTransactionControllerFindAllByAdminQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
