/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreatePaymentDto,
  PayementControllerFindAllParams,
  Payment,
  UpdatePaymentDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const payementControllerCreate = (
  createPaymentDto: CreatePaymentDto,
  signal?: AbortSignal
) => {
  return apiInstance<Payment>({
    url: `/api/payments`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPaymentDto,
    signal,
  });
};

export const getPayementControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof payementControllerCreate>>,
    TError,
    { data: CreatePaymentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof payementControllerCreate>>,
  TError,
  { data: CreatePaymentDto },
  TContext
> => {
  const mutationKey = ['payementControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof payementControllerCreate>>,
    { data: CreatePaymentDto }
  > = (props) => {
    const { data } = props ?? {};

    return payementControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PayementControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof payementControllerCreate>>
>;
export type PayementControllerCreateMutationBody = CreatePaymentDto;
export type PayementControllerCreateMutationError = unknown;

export const usePayementControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof payementControllerCreate>>,
      TError,
      { data: CreatePaymentDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof payementControllerCreate>>,
  TError,
  { data: CreatePaymentDto },
  TContext
> => {
  const mutationOptions = getPayementControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const payementControllerFindAll = (
  params?: PayementControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/payments`, method: 'GET', params, signal });
};

export const getPayementControllerFindAllQueryKey = (params?: PayementControllerFindAllParams) => {
  return [`/api/payments`, ...(params ? [params] : [])] as const;
};

export const getPayementControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof payementControllerFindAll>>,
  TError = unknown,
>(
  params?: PayementControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPayementControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof payementControllerFindAll>>> = ({
    signal,
  }) => payementControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof payementControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PayementControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof payementControllerFindAll>>
>;
export type PayementControllerFindAllQueryError = unknown;

export function usePayementControllerFindAll<
  TData = Awaited<ReturnType<typeof payementControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | PayementControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof payementControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof payementControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePayementControllerFindAll<
  TData = Awaited<ReturnType<typeof payementControllerFindAll>>,
  TError = unknown,
>(
  params?: PayementControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof payementControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof payementControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePayementControllerFindAll<
  TData = Awaited<ReturnType<typeof payementControllerFindAll>>,
  TError = unknown,
>(
  params?: PayementControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePayementControllerFindAll<
  TData = Awaited<ReturnType<typeof payementControllerFindAll>>,
  TError = unknown,
>(
  params?: PayementControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPayementControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const payementControllerFindOne = (signal?: AbortSignal) => {
  return apiInstance<Payment>({ url: `/api/payments/id`, method: 'GET', signal });
};

export const getPayementControllerFindOneQueryKey = () => {
  return [`/api/payments/id`] as const;
};

export const getPayementControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof payementControllerFindOne>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindOne>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPayementControllerFindOneQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof payementControllerFindOne>>> = ({
    signal,
  }) => payementControllerFindOne(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof payementControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PayementControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof payementControllerFindOne>>
>;
export type PayementControllerFindOneQueryError = unknown;

export function usePayementControllerFindOne<
  TData = Awaited<ReturnType<typeof payementControllerFindOne>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof payementControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof payementControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePayementControllerFindOne<
  TData = Awaited<ReturnType<typeof payementControllerFindOne>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof payementControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof payementControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePayementControllerFindOne<
  TData = Awaited<ReturnType<typeof payementControllerFindOne>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePayementControllerFindOne<
  TData = Awaited<ReturnType<typeof payementControllerFindOne>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof payementControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPayementControllerFindOneQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const payementControllerUpdate = (id: string, updatePaymentDto: UpdatePaymentDto) => {
  return apiInstance<Payment>({
    url: `/api/payments/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updatePaymentDto,
  });
};

export const getPayementControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof payementControllerUpdate>>,
    TError,
    { id: string; data: UpdatePaymentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof payementControllerUpdate>>,
  TError,
  { id: string; data: UpdatePaymentDto },
  TContext
> => {
  const mutationKey = ['payementControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof payementControllerUpdate>>,
    { id: string; data: UpdatePaymentDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return payementControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PayementControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof payementControllerUpdate>>
>;
export type PayementControllerUpdateMutationBody = UpdatePaymentDto;
export type PayementControllerUpdateMutationError = unknown;

export const usePayementControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof payementControllerUpdate>>,
      TError,
      { id: string; data: UpdatePaymentDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof payementControllerUpdate>>,
  TError,
  { id: string; data: UpdatePaymentDto },
  TContext
> => {
  const mutationOptions = getPayementControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
