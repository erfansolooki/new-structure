/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreatePermissionDto,
  GrantPermissionToUserDto,
  Permission,
  PermissionCategory,
  UpdatePermissinDto,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const permissionControllerFindAll = (signal?: AbortSignal) => {
  return apiInstance<PermissionCategory[]>({ url: `/api/permissions`, method: 'GET', signal });
};

export const getPermissionControllerFindAllQueryKey = () => {
  return [`/api/permissions`] as const;
};

export const getPermissionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindAll>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPermissionControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permissionControllerFindAll>>> = ({
    signal,
  }) => permissionControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PermissionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerFindAll>>
>;
export type PermissionControllerFindAllQueryError = unknown;

export function usePermissionControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof permissionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof permissionControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePermissionControllerFindAll<
  TData = Awaited<ReturnType<typeof permissionControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPermissionControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const permissionControllerCreate = (
  createPermissionDto: CreatePermissionDto,
  signal?: AbortSignal
) => {
  return apiInstance<Permission>({
    url: `/api/permissions`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPermissionDto,
    signal,
  });
};

export const getPermissionControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof permissionControllerCreate>>,
    TError,
    { data: CreatePermissionDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof permissionControllerCreate>>,
  TError,
  { data: CreatePermissionDto },
  TContext
> => {
  const mutationKey = ['permissionControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof permissionControllerCreate>>,
    { data: CreatePermissionDto }
  > = (props) => {
    const { data } = props ?? {};

    return permissionControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PermissionControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerCreate>>
>;
export type PermissionControllerCreateMutationBody = CreatePermissionDto;
export type PermissionControllerCreateMutationError = unknown;

export const usePermissionControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof permissionControllerCreate>>,
      TError,
      { data: CreatePermissionDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof permissionControllerCreate>>,
  TError,
  { data: CreatePermissionDto },
  TContext
> => {
  const mutationOptions = getPermissionControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const permissionControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<Permission>({ url: `/api/permissions/${id}`, method: 'GET', signal });
};

export const getPermissionControllerFindOneQueryKey = (id?: string) => {
  return [`/api/permissions/${id}`] as const;
};

export const getPermissionControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPermissionControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permissionControllerFindOne>>> = ({
    signal,
  }) => permissionControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PermissionControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerFindOne>>
>;
export type PermissionControllerFindOneQueryError = unknown;

export function usePermissionControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof permissionControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof permissionControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePermissionControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePermissionControllerFindOne<
  TData = Awaited<ReturnType<typeof permissionControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof permissionControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPermissionControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const permissionControllerUpdate = (id: string, updatePermissinDto: UpdatePermissinDto) => {
  return apiInstance<Permission>({
    url: `/api/permissions/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updatePermissinDto,
  });
};

export const getPermissionControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof permissionControllerUpdate>>,
    TError,
    { id: string; data: UpdatePermissinDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof permissionControllerUpdate>>,
  TError,
  { id: string; data: UpdatePermissinDto },
  TContext
> => {
  const mutationKey = ['permissionControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof permissionControllerUpdate>>,
    { id: string; data: UpdatePermissinDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return permissionControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PermissionControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerUpdate>>
>;
export type PermissionControllerUpdateMutationBody = UpdatePermissinDto;
export type PermissionControllerUpdateMutationError = unknown;

export const usePermissionControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof permissionControllerUpdate>>,
      TError,
      { id: string; data: UpdatePermissinDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof permissionControllerUpdate>>,
  TError,
  { id: string; data: UpdatePermissinDto },
  TContext
> => {
  const mutationOptions = getPermissionControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const permissionControllerDelete = (id: string) => {
  return apiInstance<void>({ url: `/api/permissions/${id}`, method: 'DELETE' });
};

export const getPermissionControllerDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof permissionControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof permissionControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['permissionControllerDelete'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof permissionControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return permissionControllerDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PermissionControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerDelete>>
>;

export type PermissionControllerDeleteMutationError = unknown;

export const usePermissionControllerDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof permissionControllerDelete>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof permissionControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPermissionControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const permissionControllerDissmisPermissions = (
  grantPermissionToUserDto: GrantPermissionToUserDto
) => {
  return apiInstance<void>({
    url: `/api/permissions/dissmis-from-user`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: grantPermissionToUserDto,
  });
};

export const getPermissionControllerDissmisPermissionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof permissionControllerDissmisPermissions>>,
    TError,
    { data: GrantPermissionToUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof permissionControllerDissmisPermissions>>,
  TError,
  { data: GrantPermissionToUserDto },
  TContext
> => {
  const mutationKey = ['permissionControllerDissmisPermissions'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof permissionControllerDissmisPermissions>>,
    { data: GrantPermissionToUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return permissionControllerDissmisPermissions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PermissionControllerDissmisPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerDissmisPermissions>>
>;
export type PermissionControllerDissmisPermissionsMutationBody = GrantPermissionToUserDto;
export type PermissionControllerDissmisPermissionsMutationError = unknown;

export const usePermissionControllerDissmisPermissions = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof permissionControllerDissmisPermissions>>,
      TError,
      { data: GrantPermissionToUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof permissionControllerDissmisPermissions>>,
  TError,
  { data: GrantPermissionToUserDto },
  TContext
> => {
  const mutationOptions = getPermissionControllerDissmisPermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const permissionControllerGrantPermissions = (
  grantPermissionToUserDto: GrantPermissionToUserDto,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/permissions/grant-to-user`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: grantPermissionToUserDto,
    signal,
  });
};

export const getPermissionControllerGrantPermissionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof permissionControllerGrantPermissions>>,
    TError,
    { data: GrantPermissionToUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof permissionControllerGrantPermissions>>,
  TError,
  { data: GrantPermissionToUserDto },
  TContext
> => {
  const mutationKey = ['permissionControllerGrantPermissions'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof permissionControllerGrantPermissions>>,
    { data: GrantPermissionToUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return permissionControllerGrantPermissions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PermissionControllerGrantPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof permissionControllerGrantPermissions>>
>;
export type PermissionControllerGrantPermissionsMutationBody = GrantPermissionToUserDto;
export type PermissionControllerGrantPermissionsMutationError = unknown;

export const usePermissionControllerGrantPermissions = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof permissionControllerGrantPermissions>>,
      TError,
      { data: GrantPermissionToUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof permissionControllerGrantPermissions>>,
  TError,
  { data: GrantPermissionToUserDto },
  TContext
> => {
  const mutationOptions = getPermissionControllerGrantPermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
