/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  PaidTreatmentPlan,
  PaidTreatmentPlanControllerFindAllParams,
  PaidTreatmentPlanControllerFindMineParams,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const paidTreatmentPlanControllerFindAll = (
  params?: PaidTreatmentPlanControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({ url: `/api/paid-treatment-plans`, method: 'GET', params, signal });
};

export const getPaidTreatmentPlanControllerFindAllQueryKey = (
  params?: PaidTreatmentPlanControllerFindAllParams
) => {
  return [`/api/paid-treatment-plans`, ...(params ? [params] : [])] as const;
};

export const getPaidTreatmentPlanControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidTreatmentPlanControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>> = ({
    signal,
  }) => paidTreatmentPlanControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidTreatmentPlanControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>
>;
export type PaidTreatmentPlanControllerFindAllQueryError = unknown;

export function usePaidTreatmentPlanControllerFindAll<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | PaidTreatmentPlanControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindAll<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindAll<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidTreatmentPlanControllerFindAll<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidTreatmentPlanControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paidTreatmentPlanControllerFindMine = (
  params?: PaidTreatmentPlanControllerFindMineParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/paid-treatment-plans/mine`,
    method: 'GET',
    params,
    signal,
  });
};

export const getPaidTreatmentPlanControllerFindMineQueryKey = (
  params?: PaidTreatmentPlanControllerFindMineParams
) => {
  return [`/api/paid-treatment-plans/mine`, ...(params ? [params] : [])] as const;
};

export const getPaidTreatmentPlanControllerFindMineQueryOptions = <
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidTreatmentPlanControllerFindMineQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>> = ({
    signal,
  }) => paidTreatmentPlanControllerFindMine(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidTreatmentPlanControllerFindMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>
>;
export type PaidTreatmentPlanControllerFindMineQueryError = unknown;

export function usePaidTreatmentPlanControllerFindMine<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
  TError = unknown,
>(
  params: undefined | PaidTreatmentPlanControllerFindMineParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindMine<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindMine<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidTreatmentPlanControllerFindMine<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
  TError = unknown,
>(
  params?: PaidTreatmentPlanControllerFindMineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindMine>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidTreatmentPlanControllerFindMineQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paidTreatmentPlanControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<PaidTreatmentPlan>({
    url: `/api/paid-treatment-plans/${id}`,
    method: 'GET',
    signal,
  });
};

export const getPaidTreatmentPlanControllerFindOneQueryKey = (id?: string) => {
  return [`/api/paid-treatment-plans/${id}`] as const;
};

export const getPaidTreatmentPlanControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaidTreatmentPlanControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>> = ({
    signal,
  }) => paidTreatmentPlanControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidTreatmentPlanControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>
>;
export type PaidTreatmentPlanControllerFindOneQueryError = unknown;

export function usePaidTreatmentPlanControllerFindOne<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindOne<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindOne<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidTreatmentPlanControllerFindOne<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidTreatmentPlanControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const paidTreatmentPlanControllerFindOneByAdmin = (id: string, signal?: AbortSignal) => {
  return apiInstance<PaidTreatmentPlan>({
    url: `/api/paid-treatment-plans/${id}/admin`,
    method: 'GET',
    signal,
  });
};

export const getPaidTreatmentPlanControllerFindOneByAdminQueryKey = (id?: string) => {
  return [`/api/paid-treatment-plans/${id}/admin`] as const;
};

export const getPaidTreatmentPlanControllerFindOneByAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPaidTreatmentPlanControllerFindOneByAdminQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>
  > = ({ signal }) => paidTreatmentPlanControllerFindOneByAdmin(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PaidTreatmentPlanControllerFindOneByAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>
>;
export type PaidTreatmentPlanControllerFindOneByAdminQueryError = unknown;

export function usePaidTreatmentPlanControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
          TError,
          Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePaidTreatmentPlanControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePaidTreatmentPlanControllerFindOneByAdmin<
  TData = Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paidTreatmentPlanControllerFindOneByAdmin>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPaidTreatmentPlanControllerFindOneByAdminQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
