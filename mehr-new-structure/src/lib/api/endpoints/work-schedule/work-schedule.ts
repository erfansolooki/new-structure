/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * clinic reservation system api
 * OpenAPI spec version: 2.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateWorkScheduleDto,
  PaginatedWorkScheduleResponse,
  UpdateWorkScheduleDto,
  WorkSchedule,
  WorkScheduleControllerFindAllParams,
} from '../../models';

import { apiInstance } from '../../../swaggerConfig/apiInstance';

export const workScheduleControllerCreate = (
  createWorkScheduleDto: CreateWorkScheduleDto,
  signal?: AbortSignal
) => {
  return apiInstance<WorkSchedule>({
    url: `/api/work-schedules`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createWorkScheduleDto,
    signal,
  });
};

export const getWorkScheduleControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workScheduleControllerCreate>>,
    TError,
    { data: CreateWorkScheduleDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workScheduleControllerCreate>>,
  TError,
  { data: CreateWorkScheduleDto },
  TContext
> => {
  const mutationKey = ['workScheduleControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workScheduleControllerCreate>>,
    { data: CreateWorkScheduleDto }
  > = (props) => {
    const { data } = props ?? {};

    return workScheduleControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkScheduleControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof workScheduleControllerCreate>>
>;
export type WorkScheduleControllerCreateMutationBody = CreateWorkScheduleDto;
export type WorkScheduleControllerCreateMutationError = unknown;

export const useWorkScheduleControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workScheduleControllerCreate>>,
      TError,
      { data: CreateWorkScheduleDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof workScheduleControllerCreate>>,
  TError,
  { data: CreateWorkScheduleDto },
  TContext
> => {
  const mutationOptions = getWorkScheduleControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const workScheduleControllerFindAll = (
  params?: WorkScheduleControllerFindAllParams,
  signal?: AbortSignal
) => {
  return apiInstance<PaginatedWorkScheduleResponse>({
    url: `/api/work-schedules`,
    method: 'GET',
    params,
    signal,
  });
};

export const getWorkScheduleControllerFindAllQueryKey = (
  params?: WorkScheduleControllerFindAllParams
) => {
  return [`/api/work-schedules`, ...(params ? [params] : [])] as const;
};

export const getWorkScheduleControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
  TError = unknown,
>(
  params?: WorkScheduleControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindAll>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWorkScheduleControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof workScheduleControllerFindAll>>> = ({
    signal,
  }) => workScheduleControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkScheduleControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof workScheduleControllerFindAll>>
>;
export type WorkScheduleControllerFindAllQueryError = unknown;

export function useWorkScheduleControllerFindAll<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | WorkScheduleControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof workScheduleControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWorkScheduleControllerFindAll<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
  TError = unknown,
>(
  params?: WorkScheduleControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof workScheduleControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWorkScheduleControllerFindAll<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
  TError = unknown,
>(
  params?: WorkScheduleControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWorkScheduleControllerFindAll<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindAll>>,
  TError = unknown,
>(
  params?: WorkScheduleControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWorkScheduleControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const workScheduleControllerUpdate = (updateWorkScheduleDto: UpdateWorkScheduleDto) => {
  return apiInstance<WorkSchedule>({
    url: `/api/work-schedules`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateWorkScheduleDto,
  });
};

export const getWorkScheduleControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workScheduleControllerUpdate>>,
    TError,
    { data: UpdateWorkScheduleDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workScheduleControllerUpdate>>,
  TError,
  { data: UpdateWorkScheduleDto },
  TContext
> => {
  const mutationKey = ['workScheduleControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workScheduleControllerUpdate>>,
    { data: UpdateWorkScheduleDto }
  > = (props) => {
    const { data } = props ?? {};

    return workScheduleControllerUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkScheduleControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof workScheduleControllerUpdate>>
>;
export type WorkScheduleControllerUpdateMutationBody = UpdateWorkScheduleDto;
export type WorkScheduleControllerUpdateMutationError = unknown;

export const useWorkScheduleControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workScheduleControllerUpdate>>,
      TError,
      { data: UpdateWorkScheduleDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof workScheduleControllerUpdate>>,
  TError,
  { data: UpdateWorkScheduleDto },
  TContext
> => {
  const mutationOptions = getWorkScheduleControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const workScheduleControllerFindOne = (id: string, signal?: AbortSignal) => {
  return apiInstance<WorkSchedule>({ url: `/api/work-schedules/${id}`, method: 'GET', signal });
};

export const getWorkScheduleControllerFindOneQueryKey = (id?: string) => {
  return [`/api/work-schedules/${id}`] as const;
};

export const getWorkScheduleControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWorkScheduleControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof workScheduleControllerFindOne>>> = ({
    signal,
  }) => workScheduleControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WorkScheduleControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof workScheduleControllerFindOne>>
>;
export type WorkScheduleControllerFindOneQueryError = unknown;

export function useWorkScheduleControllerFindOne<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof workScheduleControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWorkScheduleControllerFindOne<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof workScheduleControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWorkScheduleControllerFindOne<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWorkScheduleControllerFindOne<
  TData = Awaited<ReturnType<typeof workScheduleControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof workScheduleControllerFindOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getWorkScheduleControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const workScheduleControllerRemove = (id: string) => {
  return apiInstance<void>({ url: `/api/work-schedules/${id}`, method: 'DELETE' });
};

export const getWorkScheduleControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workScheduleControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workScheduleControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['workScheduleControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workScheduleControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return workScheduleControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkScheduleControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof workScheduleControllerRemove>>
>;

export type WorkScheduleControllerRemoveMutationError = unknown;

export const useWorkScheduleControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof workScheduleControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof workScheduleControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getWorkScheduleControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
